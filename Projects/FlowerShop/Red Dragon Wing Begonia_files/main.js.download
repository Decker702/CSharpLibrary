(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./main.js');
require('./home.js');
require('./components/telnum-input.js');
require('./components/items.js');
require('./components/registration.js');
require('./components/bid.js');
require('./components/donate.js');
require('./components/signIn.js');
require('./single-item.js');
require('./items.js');
require('./tickets.js');
require('./payments.js');
require('./ticket-setup.js');
require('./ticket-summary.js');
require('./forgotten-password.js');
require('./reset-password.js');
require('./thank-you.js');
require('./password.js');
require('./my-account.js');

},{"./components/bid.js":11,"./components/donate.js":12,"./components/items.js":13,"./components/registration.js":14,"./components/signIn.js":15,"./components/telnum-input.js":16,"./forgotten-password.js":20,"./home.js":24,"./items.js":25,"./main.js":26,"./my-account.js":27,"./password.js":28,"./payments.js":29,"./reset-password.js":30,"./single-item.js":36,"./thank-you.js":37,"./ticket-setup.js":38,"./ticket-summary.js":39,"./tickets.js":40}],2:[function(require,module,exports){

var glue = require('hyperglue')
var insertCss = require('insert-css')
var xtend = require('xtend')
var path = require('path')

var css = ".dialog-widget.background {\n  position: fixed;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.4);\n  z-index: 9999;\n  width: 100%;\n  height: 100%;\n}\n\n.dialog-widget.alert, .dialog-widget.confirm, .dialog-widget.prompt {\n  position: fixed;\n  left: calc(50% - 160px);\n  width: 300px;\n  top: calc(50% - 115px);\n  border: solid 1px #ddd;\n  background: whitesmoke;\n  z-index: 10000;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\n  color: black;\n  padding: 15px 10px 15px 10px;\n  font-family: arial;\n}\n\n.dialog-widget img {\n  width: 40px;\n  height: 40px;\n  position: fixed;\n}\n\n.dialog-widget img[src=\"\"] {\n  display: none;\n}\n\n.dialog-widget.alert .divider, .dialog-widget.alert input, .dialog-widget.alert .cancel {\n  display: none;\n}\n\n.dialog-widget.confirm input {\n  display: none;\n}\n\n.dialog-widget.alert .ok {\n  margin-top: 15px;\n  float: right;\n}\n\n.dialog-widget input {\n  padding: 8px;\n  -webkit-appearance: none;\n  border: solid 1px #ccc;\n  border-radius: 5px;\n  margin: 15px 5px 5px 5px;\n  width: calc(100% - 16px - 2px - 10px);\n  font-size: 12px;\n}\n\n.dialog-widget .url {\n  text-align: center;\n  font-size: 18px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  font-weight: bold;\n}\n\n.dialog-widget[data-icon=\"true\"] .url {\n  margin-left: 40px;\n}\n\n.dialog-widget .title {\n  text-align: center;\n  display:block;\n  font-size: 14px;\n}\n\n.dialog-widget .divider {\n  border-top: solid 1px #ddd;\n  padding: 0;\n  margin: 15px 0 15px -10px;\n  width: calc(100% + 20px);\n}\n\n.dialog-widget .ok, .dialog-widget .cancel {\n  color: #005AFF;\n  padding: 8px;\n  width: calc(50% - 5px);\n  font-size: 13px;\n  background-color: #EBEBF1;\n  border: none;\n  border-radius: 5px;\n}\n\n.dialog-widget .ok {\n  margin-left: 5px;\n}\n"
var html = "<div class=\"dialogue-widget type\">\n  <img class=\"icon\" src=\"\">\n  <h3 class=\"url\"></h3>\n  <span class=\"title\"></span>\n  <form>\n    <input tabindex=\"1\">\n  </form>\n  <div class=\"divider\"></div>\n  <button class=\"cancel\" tabindex=\"3\"></button>\n  <button class=\"ok\" tabindex=\"2\"></button>\n</div>\n"

module.exports = dialog

function dialog (opt) {
  opt = opt || {}
  opt = {
    'img': {src: opt.icon || ''},
    '.ok': opt.ok || 'OK',
    '.cancel': opt.cancel || 'Cancel',
    '.url': opt.hostname || window.location.hostname
  }

  insertCss(opt.style || css)

  return {
    alert: render.bind(opt, 'alert'),
    confirm: render.bind(opt, 'confirm'),
    prompt: render.bind(opt, 'prompt'),
    promptPassword: render.bind(opt, 'promptPassword'),
    cancel: cancelOpenDialog
  }
}

function render (type, title, defaultValue, cb) {
  var inputPassword = type === 'promptPassword'
  if (inputPassword) {
    type = 'prompt'
  }

  if (typeof title === 'function') {
    cb = title
    defaultValue = ''
    title = ''
  } else if (typeof defaultValue === 'function') {
    cb = defaultValue
    defaultValue = ''
  }

  if (type === 'alert') cb = cb || function noop () {}
  if (!cb) throw new Error(type + ' needs a callback')

  var opt = xtend(this)
  opt['.type'] = {'class': 'dialog-widget ' + type}
  opt['.title'] = title
  opt['input'] = {value: defaultValue || ''}
  if (inputPassword) {
    opt['input']['type'] = 'password'
  }
  var background = glue('<div class="dialog-widget background"></div>')
  var el = glue(html, opt)
  el.setAttribute('data-icon', !!opt.img)
  cancelOpenDialog.fn = cancel
  document.body.appendChild(background)
  document.body.appendChild(el)

  if (type === 'prompt') {
    var input = el.querySelector('input')
    input.focus()
    if (defaultValue) input.setSelectionRange(0, defaultValue.length)
  } else {
    el.querySelector('.ok').focus()
  }

  eventListeners('addEventListener')

  function eventListeners (method) {
    el.querySelector('.ok')[method]('click', ok)
    el.querySelector('.cancel')[method]('click', cancel)
    el.querySelector('form')[method]('submit', ok)
    window[method]('keydown', keydown)
    window[method]('focus', supress, true)
  }

  function supress (e) {
    var node = e.target
    while (node) {
      if (node.classList && node.classList.contains('dialog-widget')) return
      node = node.parentNode
    }
    setTimeout(function () { e.target.blur() })
  }

  function cancel () {
    cb()
    cleanup()
  }

  function keydown (e) {
    if (e.keyCode === 27) cancelOpenDialog()
  }

  function ok (e) {
    e.preventDefault()
    if (type === 'confirm' || type === 'alert') cb(true)
    if (type === 'prompt') cb(el.querySelector('input').value)
    cleanup()
  }

  function cleanup () {
    eventListeners('removeEventListener')
    document.body.removeChild(el)
    document.body.removeChild(background)
    delete cancelOpenDialog.fn
  }
}

function cancelOpenDialog () {
  if (cancelOpenDialog.fn) cancelOpenDialog.fn()
}

},{"hyperglue":3,"insert-css":5,"path":8,"xtend":6}],3:[function(require,module,exports){
var domify = require('domify');
module.exports = hyperglue;

var outer = null;

function hyperglue (src, updates) {
    if (!updates) updates = {};
    
    var dom = typeof src === 'object' ? [ src ] : domify(src);
    if (!outer) outer = document.createElement('div');
    
    forEach(objectKeys(updates), function (selector) {
        var value = updates[selector];
        forEach(dom, function (d) {
            var parentNode = d.parentNode;
            
            if (selector === ':first') {
                bind(d, value);
            }
            else if (/:first$/.test(selector)) {
                var k = selector.replace(/:first$/, '');
                if (parentNode) parentNode.removeChild(d);
                outer.appendChild(d);
                
                var elem = outer.querySelector(k);
                outer.removeChild(d);
                
                if (parentNode) parentNode.appendChild(d);
                if (elem) bind(elem, value);
            }
            else {
                if (parentNode) parentNode.removeChild(d);
                outer.appendChild(d);
                
                var nodes = d.parentNode.querySelectorAll(selector);
                outer.removeChild(d);
                
                if (parentNode) parentNode.appendChild(d);
                
                if (nodes.length === 0) return;
                for (var i = 0; i < nodes.length; i++) {
                    bind(nodes[i], value);
                }
            }
        });
    });
    return dom.length === 1 ? dom[0] : dom;
}

function bind (node, value) {
    if (isElement(value)) {
        node.innerHTML = '';
        node.appendChild(value);
    }
    else if (isArray(value)) {
        for (var i = 0; i < value.length; i++) {
            var e = hyperglue(node.cloneNode(true), value[i]);
            node.parentNode.insertBefore(e, node);
        }
        node.parentNode.removeChild(node);
    }
    else if (value && typeof value === 'object') {
        forEach(objectKeys(value), function (key) {
            if (key === '_text') {
                setText(node, value[key]);
            }
            else if (key === '_html' && isElement(value[key])) {
                node.innerHTML = '';
                node.appendChild(value[key]);
            }
            else if (key === '_html') {
                node.innerHTML = value[key];
            }
            else if (value[key] && typeof value[key] === 'object') {
                var vk = value[key];
                if (vk.append) {
                    node.setAttribute(key, node.getAttribute(key) + vk.append);
                }
                else if (vk.prepend) {
                    node.setAttribute(key, vk.prepend + node.getAttribute(key));
                }
            }
            else node.setAttribute(key, value[key]);
        });
    }
    else setText(node, value);
}

function forEach(xs, f) {
    if (xs.forEach) return xs.forEach(f);
    for (var i = 0; i < xs.length; i++) f(xs[i], i)
}

var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

function isElement (e) {
    return e && typeof e === 'object' && e.childNodes
        && (typeof e.appendChild === 'function'
        || typeof e.appendChild === 'object')
    ;
}

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

function setText (e, s) {
    e.innerHTML = '';
    var txt = document.createTextNode(String(s));
    e.appendChild(txt);
}

},{"domify":4}],4:[function(require,module,exports){

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Wrap map from jquery.
 */

var map = {
  option: [1, '<select multiple="multiple">', '</select>'],
  optgroup: [1, '<select multiple="multiple">', '</select>'],
  legend: [1, '<fieldset>', '</fieldset>'],
  thead: [1, '<table>', '</table>'],
  tbody: [1, '<table>', '</table>'],
  tfoot: [1, '<table>', '</table>'],
  colgroup: [1, '<table>', '</table>'],
  caption: [1, '<table>', '</table>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  th: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  _default: [0, '', '']
};

/**
 * Parse `html` and return the children.
 *
 * @param {String} html
 * @return {Array}
 * @api private
 */

function parse(html) {
  if ('string' != typeof html) throw new TypeError('String expected');
  
  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) throw new Error('No elements were generated.');
  var tag = m[1];
  
  // body support
  if (tag == 'body') {
    var el = document.createElement('html');
    el.innerHTML = html;
    return [el.removeChild(el.lastChild)];
  }
  
  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = document.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  return orphan(el.children);
}

/**
 * Orphan `els` and return an array.
 *
 * @param {NodeList} els
 * @return {Array}
 * @api private
 */

function orphan(els) {
  var ret = [];

  while (els.length) {
    ret.push(els[0].parentNode.removeChild(els[0]));
  }

  return ret;
}

},{}],5:[function(require,module,exports){
var containers = []; // will store container HTMLElement references
var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

module.exports = function (css, options) {
    options = options || {};

    var position = options.prepend === true ? 'prepend' : 'append';
    var container = options.container !== undefined ? options.container : document.querySelector('head');
    var containerId = containers.indexOf(container);

    // first time we see this container, create the necessary entries
    if (containerId === -1) {
        containerId = containers.push(container) - 1;
        styleElements[containerId] = {};
    }

    // try to get the correponding container + position styleElement, create it otherwise
    var styleElement;

    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
        styleElement = styleElements[containerId][position];
    } else {
        styleElement = styleElements[containerId][position] = createStyleElement();

        if (position === 'prepend') {
            container.insertBefore(styleElement, container.childNodes[0]);
        } else {
            container.appendChild(styleElement);
        }
    }

    // actually add the stylesheet
    if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css
    } else {
        styleElement.textContent += css;
    }

    return styleElement;
};

function createStyleElement() {
    var styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    return styleElement;
}

},{}],6:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],7:[function(require,module,exports){
(function(root, factory) {

	if (root === null) {
		throw new Error('Google-maps package can be used only in browser');
	}

	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.GoogleMapsLoader = factory();
	}

})(typeof window !== 'undefined' ? window : null, function() {


	'use strict';


	var googleVersion = '3.18';

	var script = null;

	var google = null;

	var loading = false;

	var callbacks = [];

	var onLoadEvents = [];

	var originalCreateLoaderMethod = null;


	var GoogleMapsLoader = {};


	GoogleMapsLoader.URL = 'https://maps.googleapis.com/maps/api/js';

	GoogleMapsLoader.KEY = null;

	GoogleMapsLoader.LIBRARIES = [];

	GoogleMapsLoader.CLIENT = null;

	GoogleMapsLoader.CHANNEL = null;

	GoogleMapsLoader.LANGUAGE = null;

	GoogleMapsLoader.REGION = null;

	GoogleMapsLoader.VERSION = googleVersion;

	GoogleMapsLoader.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';


	GoogleMapsLoader._googleMockApiObject = {};


	GoogleMapsLoader.load = function(fn) {
		if (google === null) {
			if (loading === true) {
				if (fn) {
					callbacks.push(fn);
				}
			} else {
				loading = true;

				window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] = function() {
					ready(fn);
				};

				GoogleMapsLoader.createLoader();
			}
		} else if (fn) {
			fn(google);
		}
	};


	GoogleMapsLoader.createLoader = function() {
		script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = GoogleMapsLoader.createUrl();

		document.body.appendChild(script);
	};


	GoogleMapsLoader.isLoaded = function() {
		return google !== null;
	};


	GoogleMapsLoader.createUrl = function() {
		var url = GoogleMapsLoader.URL;

		url += '?callback=' + GoogleMapsLoader.WINDOW_CALLBACK_NAME;

		if (GoogleMapsLoader.KEY) {
			url += '&key=' + GoogleMapsLoader.KEY;
		}

		if (GoogleMapsLoader.LIBRARIES.length > 0) {
			url += '&libraries=' + GoogleMapsLoader.LIBRARIES.join(',');
		}

		if (GoogleMapsLoader.CLIENT) {
			url += '&client=' + GoogleMapsLoader.CLIENT + '&v=' + GoogleMapsLoader.VERSION;
		}

		if (GoogleMapsLoader.CHANNEL) {
			url += '&channel=' + GoogleMapsLoader.CHANNEL;
		}

		if (GoogleMapsLoader.LANGUAGE) {
			url += '&language=' + GoogleMapsLoader.LANGUAGE;
		}

		if (GoogleMapsLoader.REGION) {
			url += '&region=' + GoogleMapsLoader.REGION;
		}

		return url;
	};


	GoogleMapsLoader.release = function(fn) {
		var release = function() {
			GoogleMapsLoader.KEY = null;
			GoogleMapsLoader.LIBRARIES = [];
			GoogleMapsLoader.CLIENT = null;
			GoogleMapsLoader.CHANNEL = null;
			GoogleMapsLoader.LANGUAGE = null;
			GoogleMapsLoader.REGION = null;
			GoogleMapsLoader.VERSION = googleVersion;

			google = null;
			loading = false;
			callbacks = [];
			onLoadEvents = [];

			if (typeof window.google !== 'undefined') {
				delete window.google;
			}

			if (typeof window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] !== 'undefined') {
				delete window[GoogleMapsLoader.WINDOW_CALLBACK_NAME];
			}

			if (originalCreateLoaderMethod !== null) {
				GoogleMapsLoader.createLoader = originalCreateLoaderMethod;
				originalCreateLoaderMethod = null;
			}

			if (script !== null) {
				script.parentElement.removeChild(script);
				script = null;
			}

			if (fn) {
				fn();
			}
		};

		if (loading) {
			GoogleMapsLoader.load(function() {
				release();
			});
		} else {
			release();
		}
	};


	GoogleMapsLoader.onLoad = function(fn) {
		onLoadEvents.push(fn);
	};


	GoogleMapsLoader.makeMock = function() {
		originalCreateLoaderMethod = GoogleMapsLoader.createLoader;

		GoogleMapsLoader.createLoader = function() {
			window.google = GoogleMapsLoader._googleMockApiObject;
			window[GoogleMapsLoader.WINDOW_CALLBACK_NAME]();
		};
	};


	var ready = function(fn) {
		var i;

		loading = false;

		if (google === null) {
			google = window.google;
		}

		for (i = 0; i < onLoadEvents.length; i++) {
			onLoadEvents[i](google);
		}

		if (fn) {
			fn(google);
		}

		for (i = 0; i < callbacks.length; i++) {
			callbacks[i](google);
		}

		callbacks = [];
	};


	return GoogleMapsLoader;

});

},{}],8:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":9}],9:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],10:[function(require,module,exports){
//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

},{}],11:[function(require,module,exports){
'use strict';

var ajax = require('../resources/ajax');
var donor = require('../resources/donor');
var scrollTo = require('../helpers/scroll-to');
var Dialogs = require("dialogs");

var $body = $("body");

module.exports = (function ($, _) {

    /**
     * jQuery objects
     */

    var $placeBid = $(".place-bid-button");
    var $bidForm = $("#bidForm");
    var $unrecognised = $("#unrecognised");
    var $confirmationModal = $("#confirmationModal");
    var $confirmationBidAmount = $("#confirmationBidAmount");
    var $failureModal = $("#failureModal");
    var $amountInput = $("input[name=amount]");
    var thisType = $("input[name=thisType]").val();
    var buyItNow = $("input[name=buyItNow]").val();
    var currencySymbol = $("input[name=currencySymbol]").val();
    var useMicrositePreauth = $("#useMicrositePreauth").val();

    var confirmMessage = "";

    function placeBidClick(event) {

        var maxBid = $("input[name=maxbid]").is(":checked") ? 1 : 0;

        if (thisType === "instant") {
            confirmMessage = "Are you sure you want to make this purchase for " + currencySymbol + $amountInput.val() + "?";
        }

        if (thisType === "silent") {
            if (maxBid === 1) {
                confirmMessage = "Are you sure you want to place a Max bid of " + currencySymbol + $amountInput.val() + "?";
            } else {
                confirmMessage = "Are you sure you want to place a bid of " + currencySymbol + $amountInput.val() + "?";

                if (parseInt(buyItNow) > 0 && parseInt(buyItNow) <= parseInt($amountInput.val())) {
                    confirmMessage = "Are you sure you want to buy this item now for " + currencySymbol + $amountInput.val() + "?";
                }
            }
        }

        event.preventDefault();
        $placeBid.off("click", placeBidClick);

        var $this = $(event.target);

        if ($bidForm.valid()) {

            if (donor.loggedIn()) {

                if (donor.registeredForEvent() && useMicrositePreauth == 0 || donor.registeredForEvent() && useMicrositePreauth == 1 && donor.hasCardOnFile()) {

                    var dialogs = Dialogs({
                        ok: "Ok",
                        cancel: null,
                        hostname: "Please Confirm",
                        icon: "/microsite/images/alert-symbol.png"
                    });
                    dialogs.cancel();
                    dialogs.confirm(confirmMessage, function (ok) {

                        if (ok) {
                            var data = {
                                lot: $("#itemId").val(),
                                bid: $amountInput.val(),
                                quantity: $("select[name=quantity]").val(),
                                anonymous: $("input[name=bid-anonymously]").is(":checked") ? 1 : 0,
                                maxbid: $("input[name=maxbid]").is(":checked") ? 1 : 0
                            };
                            $confirmationBidAmount.html($amountInput.val());
                            $body.find(".please-wait").fadeIn("fast");
                            console.log(data);
                            donor.placeBid(data, $confirmationModal, $failureModal).always(function () {
                                $body.find(".please-wait").fadeOut("fast");
                            });
                        }
                    });
                } else {

                    $("#unrecognised").collapse("show");
                    $this.hide();
                }
            } else {
                $(".signin-link").trigger("click");
            }
        }

        $placeBid.on("click", placeBidClick);
    }

    /**
     * Validate the bid form
     */
    $bidForm.validate({
        ignore: "",
        errorPlacement: function errorPlacement(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        },
        rules: {
            amount: {
                required: true,
                number: true
            }
        },
        messages: {
            amount: {
                required: "Please enter an amount",
                number: "Amount must be a number"
            }
        }
    });

    /**
     * DOM event bindings
     */
    $placeBid.on("click", placeBidClick);
})(jQuery, _);

},{"../helpers/scroll-to":21,"../resources/ajax":31,"../resources/donor":32,"dialogs":2}],12:[function(require,module,exports){
'use strict';

var ajax = require('../resources/ajax');
var donor = require('../resources/donor');
var Dialogs = require("dialogs");

var $body = $("body");

module.exports = (function ($) {

    /**
     * jQuery objects
     */

    var $placeDonation = $(".place-donate-button");
    var $donateForm = $("#donateForm");
    var $unrecognised = $("#unrecognised");
    var $confirmationModal = $("#confirmationModal");
    var $confirmationBidAmount = $("#confirmationBidAmount");
    var $failureModal = $("#failureModal");
    var $amountInput = $("input[name=amount]");
    var currencySymbol = $("input[name=currencySymbol]").val();

    function placeDonateClick(event) {

        event.preventDefault();

        var $this = $(event.target);

        $placeDonation.off("click", placeDonateClick);

        if ($donateForm.valid()) {

            // if this is a pledge, otherwise do a donation
            if (!$("#itemId").val()) {

                if (donor.loggedIn()) {

                    if (donor.hasCardOnFile() && donor.registeredForEvent()) {

                        $("#cardOnFileModal").modal("show");

                        $(".card-on-file-button").on("click", function () {

                            var data = {
                                pledgeItem: $("#itemId").val(),
                                amount: $amountInput.val(),
                                cardOnFile: 1,
                                anonymous: $("input[name=bid-anonymously]").is(":checked") ? 1 : 0
                            };
                            $confirmationBidAmount.html($amountInput.val());
                            $("#cardOnFileModal").modal("hide");
                            $body.find(".please-wait").fadeIn("fast");
                            donor.placeDonationAndPay(data, $confirmationModal, $failureModal).always(function () {
                                $body.find(".please-wait").fadeOut("fast");
                            });
                        });

                        $(".new-card-button").on("click", function () {

                            $("#registrationContainer").hide();
                            $("#unrecognised").collapse("show");
                            $this.hide();

                            $("#cardOnFileModal").modal("hide");
                        });
                    } else {
                        $("#unrecognised").collapse("show");
                        $this.hide();
                    }
                } else {
                    $(".signin-link").trigger("click");
                }
            } else {

                if (donor.loggedIn()) {

                    if (donor.registeredForEvent()) {

                        var dialogs = Dialogs({
                            ok: "Ok",
                            cancel: null,
                            hostname: "Please Confirm",
                            icon: "/microsite/images/alert-symbol.png"
                        });

                        dialogs.cancel();
                        dialogs.confirm("Are you sure you want to continue?", function (ok) {

                            if (ok) {

                                var data = {
                                    pledgeItem: $("#itemId").val(),
                                    amount: $amountInput.val(),
                                    cardOnFile: 1,
                                    anonymous: $("input[name=bid-anonymously]").is(":checked") ? 1 : 0
                                };
                                $confirmationBidAmount.html($amountInput.val());
                                $body.find(".please-wait").fadeIn("fast");
                                donor.placeDonation(data, $confirmationModal, $failureModal).always(function () {
                                    $body.find(".please-wait").fadeOut("fast");
                                });
                            }
                        });
                    } else {

                        $("#unrecognised").collapse("show");
                        $this.hide();
                    }
                } else {
                    $(".signin-link").trigger("click");
                }
            }
        }

        $placeDonation.on("click", placeDonateClick);
    }

    /**
     * Validate the bid form
     */
    $donateForm.validate({
        errorPlacement: function errorPlacement(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        },
        ignore: "",
        rules: {
            amount: {
                required: true,
                number: true
            }
        },
        messages: {
            amount: {
                required: "Please enter an amount",
                number: "Amount must be a number"
            }
        }
    });

    /**
     * DOM event bindings
     */
    $placeDonation.on("click", placeDonateClick);
})(jQuery);

},{"../resources/ajax":31,"../resources/donor":32,"dialogs":2}],13:[function(require,module,exports){
'use strict';

var items = require('../resources/items');
var url = require('../helpers/url');

module.exports = (function ($, _) {

    var location = url.end();
    var pages = ["items", "donate-items"];

    if (_.indexOf(pages, location) === -1) {
        return;
    }

    if (location === "donate-items") {
        items.stickyParam("type", "pledge");
    } else if (location === "items") {
        items.stickyParam("auctionOnly", "true");
    }

    /**
     * jQuery objects
     */
    var $changeView = $(".change-view");
    var $changeViewIcon = $(".change-view-icon");
    var $mainItemContainer = $("#mainItemContainer");
    var $nextButton = $("#nextButton");
    var $previousButton = $("#previousButton");
    var $dropdown = $('[name=filter]');
    var $search = $("#itemSearch");
    var $faSearch = $(".fa-search");

    var currentTotal = $mainItemContainer.find(".item-container").length;

    var isInitialized = false;

    /**
     * Initialise this view
     */
    initialise();

    /**
     * DOM event bindings
     */
    $changeView.on("click", changeView);
    $nextButton.on("click", nextPage);
    $previousButton.on("click", previousPage);
    $dropdown.on('change', filter);
    $search.on('keyup', $.debounce(250, function (e) {
        search(e);
    }));
    $faSearch.on('click', search);

    /**
     * Build the template and output HTML
     * @param collection
     */
    function populateItems(collection) {

        var $template = $("#itemTemplate");
        var compiled = _.template($template.html());
        var $mainItemContainer = $("#mainItemContainer");
        var $loader = $mainItemContainer.find("#loader");

        var itemHTML = "";

        if (collection.items.length === 0 && $mainItemContainer.find(".item-container").length === 0) {
            $mainItemContainer.html('<div id="loader">Sorry, no items found</div>').css("border-left", "none");
            return;
        }

        for (var i = 0; i < collection.items.length; i++) {
            itemHTML += compiled({ 'item': collection.items[i], offset: currentTotal++ });
        }

        if ($loader.is(":visible")) {
            $loader.fadeOut(function () {
                $mainItemContainer.append(itemHTML);
            });
        } else {
            $mainItemContainer.append(itemHTML);
        }

        $search.attr("readonly", false);
    }

    /**
     * Update display of categories based on the view type
     * @param view
     */
    function updateCategories(view) {

        var $categories = $(".item-xtrainfo-cat").find(".xtrainfo-value");

        $categories.each(function () {

            var $this = $(this);
            var cat = $this.data('value');

            if (view === "grid" && cat && cat.length > 17) {
                $this.html(cat.substr(0, 14) + "...");
            } else {
                $this.html(cat);
            }
        });
    }

    /**
     * Set the initial state of the view
     */
    function initialiseView() {

        if (!Modernizr.localstorage) return;

        if (window.localStorage['itemView'] === 'list') changeView();
    }

    /**
     * Change the view from grid to list
     */
    function changeView() {

        $changeView.off("click", changeView);
        var view;

        if ($mainItemContainer.hasClass("list-items")) {
            $changeView.html("List View");
            $changeViewIcon.html('<span class="fa fa-list"></span>');
            $mainItemContainer.removeClass("list-items").addClass("grid-items").css('border-left-width', '1px'); // inline css used to avoid rebuilding the master css file
            view = "grid";
        } else {
            $changeView.html("Grid View");
            $changeViewIcon.html('<span class="fa fa-th-large"></span>');
            $mainItemContainer.removeClass("grid-items").addClass("list-items").css('float', 'left').css('border-left-width', '0'); // inline css used to avoid rebuilding the master css file
            view = "list";
        }

        if (Modernizr.localstorage) window.localStorage['itemView'] = view;

        updateCategories(view);
        $changeView.on("click", changeView);
    }

    /**
     * Filter the item list
     * @param event
     */
    function filter(event) {
        emptyMainContainer();
        event.preventDefault();
        items.get(this.value, null, null, true).done(populateItems).done(toggleButtons).fail(onError);
    }

    function emptyMainContainer() {
        $mainItemContainer.empty();
        currentTotal = 0;
    }

    /**
     * Search for an item
     * @param event
     */
    function search(event) {
        emptyMainContainer();

        event.preventDefault();
        items.clearSearch();
        items.clearPagination().get(null, $search.val(), false).done(populateItems).done(toggleButtons).fail(onError);
    }

    /**
     * Click event to move to the next page of items
     *
     * @param event
     * @returns {*}
     */
    function nextPage(event) {
        event.preventDefault();

        if (isInitialized && !$nextButton.hasClass('disabled')) {
            $nextButton.off("click", nextPage);
            items.next().done(function (collection) {
                $nextButton.on("click", nextPage);
            }).done(populateItems).done(toggleButtons).fail(onError);
        }
    }

    /**
     * Click event to move to the previous page of items
     *
     * @param event
     * @returns {*}
     */
    function previousPage(event) {
        event.preventDefault();

        if (isInitialized && !$previousButton.hasClass('disabled')) {
            $previousButton.off("click", previousPage);
            items.previous().done(function (collection) {
                $previousButton.on("click", previousPage);
            }).done(populateItems).done(toggleButtons).fail(onError);
        }
    }

    /**
     * Toggle the buttons on or off
     * @param collection
     */
    function toggleButtons(collection) {
        if (collection.currentPage === 1) {
            $previousButton.addClass('disabled');
        }

        if (collection.currentPage > 1) {
            $previousButton.removeClass('disabled');
        }

        if (collection.currentPage >= collection.lastPage) {
            $nextButton.addClass('disabled');
        }

        if (collection.currentPage < collection.lastPage) {
            $nextButton.removeClass('disabled');
        }
    }

    /**
     * Callback to use on error
     * @param error
     */
    function onError(error) {
        console.log(error);
    }

    function initialise() {
        var offset = window.localStorage.getItem('lastOffset');

        /**
         * Initialise the view with the primary items to show
         */
        items.get($dropdown.val() || null, $search.val() || null, offset, true).done(clearOffset).done(populateItems).done(updatePagination).done(toggleButtons).done(scrollTo.bind(null, offset)).done(initialiseView).done(function () {
            isInitialized = true;
        }).fail(onError);
    }

    function updatePagination() {
        items.setCurrentPage(Math.floor((currentTotal - 1) / 12) + 1);
    }

    function clearOffset() {
        window.localStorage.removeItem('lastOffset');
        items.clearOffset();
    }

    function scrollTo(offset) {
        if (!offset) return;

        setTimeout(function () {
            var $element = $('[data-offset="' + offset + '"]');

            if (!$element.length) return;

            $('html, body').animate({
                scrollTop: $element.offset().top - 90
            }, 0);
        }, 500);
    }

    $dropdown.on("change", function () {
        $mainItemContainer.empty();
    });
})(jQuery, _);

},{"../helpers/url":23,"../resources/items":33}],14:[function(require,module,exports){
"use strict";

var donor = require('../resources/donor');
var Dialogs = require("dialogs");
var ScrollTo = require("../helpers/scroll-to");

module.exports = (function ($, _) {

    /**
     * jQuery objects
     */
    var $registrationForm = $("#registrationForm");
    var $registrationButton = $(".register-button-main");
    var $confirmationModal = $("#confirmationModal");
    var $failureModal = $("#failureModal");
    var $authFailureModal = $("#authFailureModal");
    var $giftaid = $("#giftaid");
    var $body = $("body");
    var noop = function noop() {};
    var $amountInput = $(".amount-input");
    var $bidForm = $("#bidForm");
    var $donateForm = $("#donateForm");
    var $confirmationBidAmount = $("#confirmationBidAmount");
    var $itemId = $("#itemId");
    var actionMessage = "register";

    if ($body.hasClass("registration-bid")) {
        actionMessage = "place this bid/purchase";
    }

    if ($body.hasClass("registration-donate")) {
        actionMessage = "place this donation/pledge";
    }

    /**
     * Process and send the form
     * @param event
     */
    function registrationButtonClick(event) {

        event.preventDefault();
        $registrationButton.off("click", registrationButtonClick);

        if ($registrationForm.valid()) {

            var dialogs = Dialogs({
                ok: "Ok",
                cancel: null,
                hostname: "Please Confirm",
                icon: "/microsite/images/alert-symbol.png"
            });
            dialogs.cancel();
            dialogs.confirm("Are you sure you want to " + actionMessage + "?", function (ok) {

                if (ok) {

                    var regArray = $registrationForm.serializeArray();
                    regArray = regArray.concat($bidForm.serializeArray());
                    regArray = regArray.concat($donateForm.serializeArray());
                    $body.find(".please-wait").fadeIn("fast");

                    var data = {
                        lot: $itemId.val(),
                        bid: $amountInput.val(),
                        amount: $amountInput.val(),
                        quantity: $("select[name=quantity]").val(),
                        pledgeItem: $itemId.val(),
                        anonymous: $("input[name=bid-anonymously]").is(":checked") ? 1 : 0,
                        maxbid: $("input[name=maxbid]").is(":checked") ? 1 : 0
                    };

                    if (!donor.loggedIn() || !donor.registeredForEvent()) {

                        var $cardOnFile = $("input[name=cardOnFile]");
                        if ($cardOnFile.val() && ($cardOnFile.val() === "1" || $cardOnFile.prop("checked", true))) {
                            donor.addCard(regArray).done(function (responseData) {

                                if (responseData.body.token) {

                                    regArray.push({
                                        name: "token",
                                        value: responseData.body.token
                                    });

                                    donor.register(regArray).done(function () {
                                        $(document).trigger("signed-in");
                                        noop(data, regArray);
                                    });
                                } else {
                                    $body.find(".please-wait").fadeOut("fast");
                                    $authFailureModal.modal("show");
                                }
                            }).fail(function () {
                                $body.find(".please-wait").fadeOut("fast");
                                $authFailureModal.modal("show");
                            });
                        } else {
                            donor.register(regArray).done(function () {
                                $(document).trigger("signed-in");
                                noop(data, regArray);
                            });
                        }
                    } else {

                        var $cardOnFile = $("input[name=cardOnFile]");

                        if ($cardOnFile.val() && ($cardOnFile.val() === "1" || $cardOnFile.prop("checked", true))) {
                            donor.addCard(regArray).done(function (responseData) {

                                if (responseData.body.token) {
                                    regArray.push({
                                        name: "token",
                                        value: responseData.body.token
                                    });

                                    donor.update(regArray).done(function () {
                                        $(document).trigger("signed-in");
                                        noop(data, regArray);
                                    });
                                } else {
                                    $body.find(".please-wait").fadeOut("fast");
                                    $authFailureModal.modal("show");
                                }
                            }).fail(function () {
                                $body.find(".please-wait").fadeOut("fast");
                                $authFailureModal.modal("show");
                            });
                        } else {
                            donor.update(regArray).done(function () {
                                $(document).trigger("signed-in");
                                noop(data, regArray);
                            });
                        }
                    }
                }
            });
        }

        $registrationButton.on("click", registrationButtonClick);
    }

    jQuery.validator.addMethod("passwordRegex", function (value, element) {
        return this.optional(element) || /^(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}/.test(value);
    }, "Password must be minimum 8 characters and contain at least one uppercase letter, one number and one special character ($@!%*#?&)");

    jQuery.validator.addMethod("noSpaceRegex", function (value, element) {
        return this.optional(element) || !/^\s{1,}/gm.test(value);
    }, "This field is required");

    /**
     * Validate registration form's default fields
     */
    $registrationForm.validate({
        errorPlacement: function errorPlacement(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else if (element.closest('.terms-agree-text').length) {
                error.insertAfter(element.closest('.terms-agree-text'));
            } else {
                error.insertAfter(element);
            }
        },
        invalidHandler: function invalidHandler(event, validator) {
            // 'this' refers to the form
            var errors = validator.numberOfInvalids();
            if (errors) {
                ScrollTo($(validator.errorList[0].element));
            }
        },
        rules: {
            password: {
                required: true,
                passwordRegex: {
                    param: true
                }
            },
            password2: {
                required: true,
                equalTo: "#password",
                passwordRegex: {
                    param: true
                }
            },
            email: {
                email: true
            },
            address1: {
                noSpaceRegex: {
                    param: true
                }
            },
            town: {
                noSpaceRegex: {
                    param: true
                }
            },
            county: {
                noSpaceRegex: {
                    param: true
                }
            },
            postcode: {
                noSpaceRegex: {
                    param: true
                }
            },
            company: {
                noSpaceRegex: {
                    param: true
                }
            },
            fullname: {
                required: true,
                noSpaceRegex: {
                    param: true
                }
            },
            card: {
                required: true,
                rangelength: [15, 16],
                digits: true
            },
            cvv2: {
                required: true,
                rangelength: [3, 4],
                digits: true
            },
            expm: {
                required: true
            },
            expy: {
                required: true
            },
            giftaidAddress: {
                required: function required(element) {
                    return $giftaid.is(":checked");
                },
                noSpaceRegex: {
                    param: true
                }
            },
            giftaidPostcode: {
                required: function required(element) {
                    return $giftaid.is(":checked");
                },
                noSpaceRegex: {
                    param: true
                }
            },
            billingAddress1: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingTown: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingCounty: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingPostcode: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            terms: "required"
        },
        messages: {
            ticketType: "Please select a ticket type",
            name: {
                required: "Please enter your full name",
                minlength: "Please enter your full name"
            },
            msisdn: {
                required: "Please enter your mobile number",
                minlength: "Please enter your mobile number",
                digits: "Mobile number must only contain numbers"
            },
            password2: {
                equalTo: "Passwords do not match"
            },
            email: {
                email: "Please enter a valid email address"
            },
            address1: {
                required: "Please enter your billing address"
            },
            town: {
                required: "Please enter your billing town/city"
            },
            county: {
                required: "Please enter your billing state/region"
            },
            postcode: {
                required: "Please enter your billing Zip/postal code"
            },
            fullname: "Please enter your name as it appears on the card",
            cardNumber: {
                required: "Please enter the long card number",
                rangelength: "Please enter a valid long card number",
                number: "Please enter a valid long card number"
            },
            securityNumber: {
                required: "Please enter the Security CVV2 number from the back of your card",
                rangelength: "Please enter a valid security number",
                number: "Please enter a valid security number"
            },
            expm: {
                required: "Please select card expiry month"
            },
            expy: {
                required: "Please select card expiry year"
            },
            giftaidAddress: {
                required: "Please enter your address"
            },
            giftaidPostcode: {
                required: "Please enter your postcode"
            },
            billingAddress1: {
                required: "Please enter your billing address"
            },
            billingTown: {
                required: "Please enter your billing town/city"
            },
            billingCounty: {
                required: "Please enter your billing state/region"
            },
            billingPostcode: {
                required: "Please enter your billing Zip/postal code"
            },
            terms: "Please accept the terms and conditions"
        }
    });

    if ($("input[name=password]").is(":visible") && $body.hasClass("registration-page")) {
        $("#registrationForm").find("#email").rules("remove");
        $("#registrationForm").find("#email").rules("add", {
            required: true,
            email: true,
            remote: {
                url: "/API_1.5/usernamesearch",
                type: "get",
                data: {
                    username: function username() {
                        return $("#registrationForm").find("#email").val();
                    }
                },
                dataType: "text",
                beforeSend: function beforeSend(xhr) {
                    xhr.setRequestHeader("Event", $("input[name=event]").val());
                }
            }
        });
    }

    /**
     * DOM event bindings
     */
    $registrationButton.on("click", registrationButtonClick);

    if ($body.hasClass("registration-bid")) {
        noop = function (data, regArray) {

            $confirmationBidAmount.html($amountInput.val());

            if (!data['bid']) {
                data['bid'] = $(".amount-input").val();
                if (!data['bid']) {
                    data['bid'] = $("input[name=amount]").val();
                }
            }

            return donor.placeBid(data, $confirmationModal, $failureModal).always(function () {
                $body.find(".please-wait").fadeOut("fast");
            });
        };
    }

    if ($body.hasClass("registration-donate")) {
        noop = function (data, regArray) {

            $confirmationBidAmount.html($amountInput.val());
            var concatenated = _.concat(data, regArray);

            if (data.pledgeItem) {
                concatenated.push({
                    name: "pledgeItem",
                    value: data.pledgeItem
                });
                var prom = donor.placeDonation(concatenated, $confirmationModal, $failureModal);
            } else {
                var prom = donor.placeDonationAndPay(concatenated, $confirmationModal, $failureModal);
            }

            return prom.always(function () {
                $body.find(".please-wait").fadeOut("fast");
            });
        };
    }

    if ($body.hasClass("registration-page")) {
        noop = function () {
            window.location.href = "/microsite/thank-you?action=registration";
        };
    }
})(jQuery, _);

},{"../helpers/scroll-to":21,"../resources/donor":32,"dialogs":2}],15:[function(require,module,exports){
'use strict';

var ajax = require('../resources/ajax');
var donor = require('../resources/donor');
var scrollTo = require('../helpers/scroll-to');

module.exports = (function ($, _) {

    /**
     * jQuery objects
     */
    var $passwordModal = $("#passwordModal");
    var $email = $passwordModal.find("input[name=email]");
    var $password = $passwordModal.find("input[name=password]");
    var $passwordButton = $(".password-button");
    var $unrecognised = $("#unrecognised");
    var $registerNow = $("#registerNow");

    /**
     * Verify and send bid
     * @param event
     */
    function passwordButtonClick(event) {

        event.preventDefault();
        event.stopPropagation();

        var $this = $(event.target);

        $passwordButton.off("click", passwordButtonClick);

        $passwordModal.find(".error").remove();
        $this.find(".spinner").addClass("fa-spinner");
        donor.get(null, $email.val(), $password.val()).done(function () {

            $passwordModal.modal("hide");

            donor.populateRegFields();

            $(document).trigger("signed-in");
            $(document).trigger("show-reg-options");
            $(".place-donate-button").show();
            $(".place-bid-button").show();
        }).fail(function (e) {

            $passwordModal.find(".verification-info").after("<p class='verification-info error'>Sorry, your email address or password could not be found</p>");
        }).always(function () {
            $passwordButton.on("click", passwordButtonClick);
            $this.find(".spinner").removeClass("fa-spinner");
        });
    }

    /**
     *  Register now click
     * @param event
     */
    function registerNowClick(event) {

        if ($(".place-donate-button").is(":visible") || $(".place-bid-button").is(":visible")) {

            $passwordModal.modal("hide");
            $("#signInRegistrationOption").show();
            $unrecognised.collapse("show");
            $(".place-donate-button").hide();
            $(".place-bid-button").hide();
            scrollTo($unrecognised);
        } else {

            window.location.href = "/microsite/registration";
        }
    }

    /**
     * DOM event bindings
     */
    $passwordButton.on("click", passwordButtonClick);
    $registerNow.on("click", registerNowClick);
})(jQuery, _);

},{"../helpers/scroll-to":21,"../resources/ajax":31,"../resources/donor":32}],16:[function(require,module,exports){
'use strict';

module.exports = (function ($, _) {

    /**
     * jQuery objects
     */

    var $telnums = $("[telnum-component]");

    function Telnum() {

        /************************
         *      Properties
         ************************/

        var $this = $(this);
        var $inputs = $this.find('input[type="tel"]');
        var $hidden = $this.find('input[type="hidden"]');

        /********************
         *      Helpers
         ********************/

        /**
         * Get the dom node from a jquery object, but also safely accepts a dom node
         *
         * @param {HTMLElement|$} el
         * @returns {HTMLElement}
         */
        function getDom(el) {
            return el instanceof $ ? el.get(0) : el;
        }

        /**
         * Get the elements value
         *
         * @param {HTMLElement|$} el
         * @returns {*}
         */
        function getVal(el) {
            return getDom(el).value;
        }

        /**
         * Formats a string to remove all non numeric values
         *
         * @param {String} string
         * @returns {*|{dist}|void|string|XML}
         */
        function formatInput(string) {
            return string.replace(/\D/g, '');
        }

        /**
         * Formats a string to remove all non numeric values
         *
         * @param {HTMLElement|$} el
         * @returns void
         */
        function focusEl(el) {
            $(el).trigger('touchstart');
        }

        /**
         * Check if an input box has all its available characters filled
         *
         * @param {HTMLElement|$} el
         * @returns {boolean}
         */
        function hasCompletedInput(el) {
            el = getDom(el);
            return parseInt(el.dataset.telnumSize) === el.value.length;
        }

        /**
         * Extract pasted data from an event
         *
         * @param {ClipboardEvent} e
         * @returns {string}
         */
        function getPastedText(e) {
            console.log(e);
            if (window.clipboardData && window.clipboardData.getData) {
                // IE
                return window.clipboardData.getData('Text');
            } else if (e.clipboardData && e.clipboardData.getData) {
                return e.clipboardData.getData('text/plain');
            }
        }

        /**
         * Get the current caret position of a text box input
         *
         * @param {HTMLElement|$} el
         * @returns {number}
         */
        function getCaretPosition(el) {
            el = getDom(el);
            var caretPos = 0;
            if (document.selection) {
                focusEl(el);
                var sel = document.selection.createRange();
                sel.moveStart('character', -el.value.length);
                caretPos = sel.text.length;
            } else if (el.selectionStart || el.selectionStart == '0') {
                caretPos = el.selectionStart;
            }
            return caretPos;
        }

        /**
         * Sets the caret position of a text box input
         *
         * @param {HTMLElement|$} el
         * @returns {number}
         */
        function setCaretPosition(el, pos) {
            el = getDom(el);
            if (el.setSelectionRange) {
                focusEl(el);
                el.setSelectionRange(pos, pos);
            } else if (el.createTextRange) {
                var range = el.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        }

        /***************************
         *      Event Handlers
         ***************************/

        /**
         * Update the hidden input field in the component so forms ect can know the telnum value
         */
        function updateHidden() {
            var all = _.every($inputs, hasCompletedInput);

            // Only set if all numbers are set, because we want to validate
            $hidden.val(all ? $.map($inputs, getVal).join('') : '');

            // If has error, keep checking every change until we dont
            if ($this.find('.error').size() > 0) $hidden.closest('form').valid();
        }

        /**
         * Check which box to is available for input, and set it to focused
         */
        function updateFocus() {
            var $availableInputs = $inputs.filter(function () {
                var $input = $(this);
                return !hasCompletedInput($input.get(0));
            });

            var $focused = $availableInputs.size() > 0 ? $availableInputs.first() : $inputs.last();

            focusEl($focused);
        }

        /**
         * Catch any unwanted input and prevent default
         *
         * @param {Event}
         */
        function filterChars(event) {
            var char = String.fromCharCode(event.which);
            if (char.match(/[a-zA-Z ]+/) && !event.ctrlKey && !event.altKey) event.preventDefault();
        }

        /**
         * Check handle the process of moving forwards through the inputs
         *
         * @param {Event}
         * @returns {number}
         */
        function focusFoward(event) {
            var $focused = $inputs.filter(':focus');
            var focusedIndex = $inputs.index($focused);
            var $next = $inputs.eq(focusedIndex + 1);

            var atEndOfInput = getCaretPosition($focused) === $focused.val().length;

            // User has keyed right to next input
            if (event.keyCode === 46 && atEndOfInput) {
                focusEl($next);
            }

            // user just keyed right to "this" input, so dont flick
            // back to the right, instead return/exit and force caret to end
            if (event.keyCode === 37 && atEndOfInput) {
                return setCaretPosition($focused, $focused.val().length);
            }

            // User just typed last char in the current input, so move to start of next input
            if (hasCompletedInput($focused) && $next.size() > 0 && atEndOfInput) {
                focusEl($next);
                setCaretPosition($next, 0);
            }
        }

        function focusBack(event) {
            var $focused = $inputs.filter(':focus');
            var focusedIndex = $inputs.index($focused);
            var $prev = $inputs.eq(focusedIndex - 1);

            var atStartOfInput = getCaretPosition($focused) === 0;
            var goingBackwards = event.keyCode === 37 && atStartOfInput;
            var deletingFromPrev = event.keyCode === 8 && atStartOfInput;
            var isFirstInput = getDom($focused) === getDom($inputs.first());

            // If the user keyed left or hit the back button,
            // move to the previous input before it runs that action (move caret or delete)
            if ((goingBackwards || deletingFromPrev) && !isFirstInput) {
                focusEl($prev);
                setCaretPosition($prev, $prev.val().length);
            }
        }

        /**
         * Event handler for pasting text
         *
         * @param {ClipboardEvent} event
         */
        function handlePaste(event) {
            event.preventDefault();

            // retrive and filter nun numbers from the pasted text
            var text = formatInput(getPastedText(event.originalEvent));
            var fillableInput = function fillableInput() {
                return !hasCompletedInput(this);
            };

            $.each(text.split(''), function (index, char) {
                var $input = $inputs.filter(fillableInput).first();
                if ($input.length > 0) $input.val($input.val() + char);
            });

            updateFocus();
        }

        /**
         * Force focus to first element if empty (to avoid not started at the start)
         */
        function onFocus(e) {
            if (e.delegateTarget !== getDom($inputs.first()) && // Stop infinite loop
            $.map($inputs, getVal).join('') === '') {
                e.preventDefault();
                focusEl($inputs.first());
                return false;
            }
        }

        /**
         * Handle ios devices focus
         */
        function onTouchstart() {
            $(this).focus();
        }

        /***************************
         *      Event Bindings
         ***************************/

        $inputs.on('paste', handlePaste);

        $inputs.on('keydown', focusBack);
        $inputs.on('keydown', filterChars);

        $inputs.on('keyup', updateHidden);
        $inputs.on('keyup', focusFoward);
        $inputs.on('focus', onFocus);
        $inputs.on('touchstart', onTouchstart);
    };

    $telnums.each(Telnum);
})(jQuery, _);

},{}],17:[function(require,module,exports){
"use strict";

var ticket = function ticket(id, name, price, bookingFee, processingFee, quantity, seats, options, description, product) {

    var discountAmount = 0;
    var discountPercentage = 0;
    var discountType;

    /**
     *  Get the ticket price
     * @returns {string}
     */
    function getPrice() {

        return parseFloat(price).toFixed(2);
    }

    /**
     *  Return the booking fee
     * @returns {string}
     */
    function getBookingFee() {

        return parseFloat(bookingFee).toFixed(2);
    }

    /**
     *  Return the processing fee
     * @returns {string}
     */
    function getProcessingFee() {

        return parseFloat(processingFee).toFixed(2);
    }

    /**
     *  Set the quantity selected
     * @param newQuantity
     */
    function setQuantity(newQuantity) {

        quantity = newQuantity;
    }

    /**
     *  Get the quantity selected of this ticket
     * @returns {Number}
     */
    function getQuantity() {

        return parseInt(quantity);
    }

    /**
     *  Apply the discount to the ticket
     * @param promoCode
     */
    function applyDiscount(promoCode) {

        if (promoCode.discountType === "amount") {

            discountAmount = promoCode.discountAmount;
        } else {

            discountPercentage = promoCode.discountPercentage;
        }

        discountType = promoCode.discountType;
    }

    /**
     *  Get the discount amount applied to this ticket
     * @returns {string}
     */
    function getDiscountAmount() {

        return parseFloat(discountAmount).toFixed(2);
    }

    /**
     *  Get the discount percentage applied to this ticket
     * @returns {string}
     */
    function getDiscountPercentage() {

        return parseFloat(discountPercentage).toFixed(2);
    }

    /**
     *  Get the total discount amount
     * @returns {Number}
     */
    function getDiscount() {

        var discount = 0;

        if (discountType === "amount") {

            discount = discountAmount;
        } else {

            discount = price / 100 * discountPercentage;
        }

        return parseFloat(discount);
    }

    /**
     *  Calculate the sub total of this ticket type
     * @returns {Number}
     */
    function getSubTotal() {

        return parseFloat(getPrice() * getQuantity());
    }

    /**
     *  Calculate the total booking fees of this ticket type
     * @returns {Number}
     */
    function getTotalBooking() {

        return parseFloat(getBookingFee() * getQuantity());
    }

    /**
     *  Calculate the total processing fees of this ticket type
     * @returns {Number}
     */
    function getTotalProcessing() {

        return _.round((getSubTotal() - getTotalDiscount() + getTotalBooking()) / 100 * getProcessingFee(), 2);
    }

    /**
     *  Calculate the total number of seats in this ticket type
     * @returns {Number}
     */
    function getTotalSeats() {

        return parseInt(seats * getQuantity());
    }

    /**
     *  Calculate the total discount based on the discount type
     * @returns {Number}
     */
    function getTotalDiscount() {

        var totalDiscount;

        if (discountType === "amount") {
            totalDiscount = parseFloat(getDiscount());
        } else {
            totalDiscount = parseFloat(getDiscount() * getQuantity());
        }

        // If the subtotal is 0 then don't apply a discount
        if (getSubTotal() == 0) {
            totalDiscount = 0;
        }

        return parseFloat(totalDiscount);
    }

    /**
     *  Calculate the total cost of this ticket type minus discounts, plus fees
     * @returns {Number}
     */
    function getTotalAmount() {

        return parseFloat(parseFloat(getSubTotal()) - parseFloat(getTotalDiscount()) + parseFloat(getTotalBooking()) + parseFloat(getTotalProcessing()));
    }

    return {
        id: id,
        price: getPrice,
        name: name,
        bookingFee: getBookingFee,
        processingFee: getProcessingFee,
        setQuantity: setQuantity,
        quantity: getQuantity,
        discountAmount: getDiscountAmount,
        discountPercentage: getDiscountPercentage,
        discount: getDiscount,
        applyDiscount: applyDiscount,
        options: options,
        description: description,
        seats: seats,
        product: product,
        getSubTotal: getSubTotal,
        getTotalBooking: getTotalBooking,
        getTotalProcessing: getTotalProcessing,
        getTotalDiscount: getTotalDiscount,
        getTotalSeats: getTotalSeats,
        getTotalAmount: getTotalAmount
    };
};

module.exports = ticket;

},{}],18:[function(require,module,exports){
"use strict";

var ajax = require("../resources/ajax");
var session = require("../resources/session");

var ticketCollection = (function () {

    var collection = [];
    var promoCodes = [];

    /**
     *  Add a ticket to the collection
     * @param ticket
     */
    function addToCollection(ticket) {

        collection.push(ticket);
    }

    /**
     *  Output the collection as an array
     * @returns {Array}
     */
    function getCollection() {

        return collection;
    }

    /**
     *  Pull a ticket from the collection by id
     * @param id
     * @returns {*}
     */
    function getById(id) {

        for (var ticket in collection) {

            if (collection[ticket].id == id) {
                return collection[ticket];
            }
        }
    }

    /**
     *  Get the sub total of the current collection
     * @returns {string}
     */
    function getSubTotal() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getSubTotal();
        }

        return _.round(total, 2).toFixed(2);
    }

    /**
     *  Get the discount amount
     * @returns {string}
     */
    function getDiscount() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getTotalDiscount();
        }

        return _.round(total, 2).toFixed(2);
    }

    /**
     *  Get the total booking fees from the tickets
     * @returns {string}
     */
    function getTotalBooking() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getTotalBooking();
        }

        return _.round(total, 2).toFixed(2);
    }

    /**
     *  Get the total processing fees from the tickets
     * @returns {string}
     */
    function getTotalProcessing() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getTotalProcessing();
        }

        return _.round(total, 2).toFixed(2);
    }

    /**
     *  Calculate the total number of seats in the collection from the tickets
     * @returns {Number}
     */
    function getTotalSeats() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getTotalSeats();
        }

        return parseInt(total);
    }

    /**
     *  Get the total amount of the selected tickets
     * @returns {string}
     */
    function getTotalAmount() {

        var total = 0;

        for (var ticket in collection) {

            total += collection[ticket].getTotalAmount();
        }

        return _.round(total, 2).toFixed(2);
    }

    /**
     *  Add a promo code that has been applied
     * @param newPromoCode
     */
    function addPromoCode(newPromoCode) {

        promoCodes.push(newPromoCode);
    }

    /**
     *  Get the promo code that has been applied
     * @returns {Array}
     */
    function getPromoCodes() {

        return promoCodes;
    }

    /**
     *  Clear the ticket collection
     */
    function clear() {

        collection = [];
        save();

        var clearReserveTickets = {
            reserveTickets: [],
            oldSession: parseInt(session.load().getTime()),
            session: parseInt(session.load().getTime())
        };

        reserveTickets(clearReserveTickets);
    }

    /**
     *  Save the ticket collection to local storage
     */
    function save() {

        var tickets = [];

        for (var ticket in collection) {
            if (collection[ticket].quantity() > 0) {
                var thisTicket = collection[ticket];
                tickets.push({
                    id: thisTicket.id,
                    name: thisTicket.name,
                    quantity: thisTicket.quantity(),
                    price: thisTicket.price(),
                    options: thisTicket.options,
                    total: thisTicket.getTotalAmount().toFixed(2),
                    seats: thisTicket.getTotalSeats()
                });
            }
        }

        var ticketCollection = {
            tickets: tickets,
            subTotal: getSubTotal(),
            discount: getDiscount(),
            totalBooking: getTotalBooking(),
            totalProcessing: getTotalProcessing(),
            totalAmount: getTotalAmount(),
            promoCodes: getPromoCodes(),
            totalSeats: getTotalSeats()
        };

        localStorage.setItem('ticketOrder.ticketCollection', JSON.stringify(ticketCollection));
    }

    /**
     *  Load the ticket collection from local storage
     */
    function load() {

        return JSON.parse(localStorage.getItem('ticketOrder.ticketCollection'));
    }

    /**
     *  Build up the ticket and the session data to reserve the tickets
     * @param oldSession
     * @returns {{reserveTickets: Array, oldSession: *, session: Number}}
     */
    function generateReserveTicketData(oldSession) {

        var reserveTicketsArray = load();

        var tickets = reserveTicketsArray.tickets;
        var reserveTickets = [];

        for (var ticket in tickets) {
            if (tickets[ticket].quantity > 0) {
                reserveTickets.push({
                    ticketType: parseInt(tickets[ticket].id),
                    quantity: tickets[ticket].quantity
                });
            }
        }

        return {
            reserveTickets: reserveTickets,
            oldSession: oldSession,
            session: parseInt(session.load().getTime())
        };
    }

    /**
     *  Send the reserve ticket data to the API
     * @param data
     */
    function reserveTickets(data) {

        ajax("/ticket/reserve", "post", { data: JSON.stringify(data) });
    }

    /**
     *  Clear the session and remove the reserved tickets
     */
    function unloadAndClear() {
        clear();
        session.end();
    }

    return {
        add: addToCollection,
        get: getById,
        raw: getCollection,
        getSubTotal: getSubTotal,
        getDiscount: getDiscount,
        getTotalBooking: getTotalBooking,
        getTotalProcessing: getTotalProcessing,
        getTotalAmount: getTotalAmount,
        getTotalSeats: getTotalSeats,
        addPromoCode: addPromoCode,
        getPromoCodes: getPromoCodes,
        clear: clear,
        save: save,
        load: load,
        reserveTickets: reserveTickets,
        generateReserveTicketData: generateReserveTicketData,
        unloadAndClear: unloadAndClear
    };
})();

module.exports = ticketCollection;

},{"../resources/ajax":31,"../resources/session":35}],19:[function(require,module,exports){
"use strict";

var ticketOrder = (function () {

    function loadTicketOrder() {

        return JSON.parse(localStorage.getItem("ticketOrder"));
    }

    function saveTicketOrder(tickets) {

        localStorage.setItem("ticketOrder", JSON.stringify(tickets));
    }

    return {
        load: loadTicketOrder,
        save: saveTicketOrder
    };
})();

module.exports = ticketOrder;

},{}],20:[function(require,module,exports){
"use strict";

var $body = $("body");
var ajax = require('./resources/ajax');

$(function () {

    var $resetButton = $("#resetButton");
    var $forgottenPasswordForm = $("#forgottenPasswordForm");

    if ($body.hasClass("forgotten-password")) {
        (function () {

            /**
             *  When reset button is clicked
             * @param event
             */

            var resetButtonClick = function resetButtonClick(event) {

                var $this = $(event.target);

                $this.off("click", resetButtonClick);

                if ($forgottenPasswordForm.valid()) {

                    var data = {
                        email: $("input[name=forgottenEmail]").val()
                    };

                    var prom = ajax("/forgotten-password", "post", data);

                    prom.done(function () {
                        $(".content-main-box-header").html("Thank You");
                        $(".text-container").html("Your reset password instructions have been emailed to you");
                    });
                    prom.fail(function () {
                        $(".content-main-box-header").html("Sorry");
                        $(".text-container").html("That email isn't associated with an account, would you like to create one?<br /><br /><a href='/microsite/registration' class='btn btn-lg btn-brand-secondary'>Yes, I'd like to Register &amp; Create an Account</a>&nbsp;<a href='/microsite/forgotten-password' class='btn btn-lg btn-brand-secondary'>No, I'll try again</a>");
                    });
                }

                $this.on("click", resetButtonClick);
            };

            $forgottenPasswordForm.validate({
                rules: {
                    forgottenEmail: {
                        required: true,
                        email: true
                    }
                }
            });

            $resetButton.on("click", resetButtonClick);
        })();
    }
});

},{"./resources/ajax":31}],21:[function(require,module,exports){
'use strict';

module.exports = (function ($) {

    return function ($el, transitionTime) {
        transitionTime = typeof transitionTime !== 'undefined' ? transitionTime : 1000;
        $('html, body').animate({
            scrollTop: $el.offset().top - $('.navbar-fixed-top').first().height() - 10
        }, transitionTime);
    };
})(jQuery);

},{}],22:[function(require,module,exports){
"use strict";

var tools = (function () {

    /**
     *  Change camelcase to title case
     * @param input
     * @returns {string}
     */
    function removeCamel(input) {

        var result = input.replace(/([A-Z])/g, " $1");
        return result.charAt(0).toUpperCase() + result.slice(1);
    }

    /**
     *  Returns the querystring param by name
     * @param name
     * @param url
     * @returns {*}
     */
    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    /**
     *
     * @param amt
     * @returns {string|*|{dist}|void|XML}
     */
    function formatMoney(amt) {
        return amt.replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
    }

    return {
        removeCamel: removeCamel,
        getParameterByName: getParameterByName,
        formatMoney: formatMoney
    };
})();

module.exports = tools;

},{}],23:[function(require,module,exports){
"use strict";

module.exports = (function () {
    var url = window.location.href.split("/");

    return {
        protocol: function protocol() {
            return url[0];
        },
        host: function host() {
            return url[2];
        },
        end: function end() {
            if (url[url.length - 1].indexOf("?") > 0) {
                return url[url.length - 1].substring(0, url[url.length - 1].indexOf("?"));
            } else {
                return url[url.length - 1];
            }
        }
    };
})();

},{}],24:[function(require,module,exports){
'use strict';

var GoogleMapsLoader = require('google-maps');
var moment = require('moment');

var $document = $(document);
var $window = $(window);
var $body = $("body");

// Remove the images in the custom text
$(".no-bold").find("img").addClass("img-responsive");

// Add the show more footer to the custom text box
function addCustomTextFooter() {

    var $customTextArea = $(".custom-text-area");
    var $customText = $customTextArea.find(".content-main-box-content");

    if ($customTextArea.outerHeight() > 480) {
        $customText.trigger("destroy.dot");
        $customText.removeClass("dot-height-250");
        $customText.addClass("dot-height-550");
        $customText.css("height", "621px");
        $customText.dotdotdot();
    }

    if ($customTextArea.outerHeight() > 800) {
        $customText.trigger("destroy.dot");
        $customText.removeClass("dot-height-550");
        $customText.addClass("dot-height-800");
        $customText.css("height", "878px");
        $customText.dotdotdot();
    }

    $customText.trigger("isTruncated", function (isTruncated) {
        if (isTruncated) {
            $(".custom-text-area").find(".content-footer").show();
        }
    });
}

$(function () {

    if ($body.hasClass("main") || $body.hasClass("event") || $body.hasClass("register")) {
        var equalHeightsWithChildren = function equalHeightsWithChildren() {
            $equalHeightsWithChildren.css('height', 'auto').children().css('height', 'auto');
            if (window.innerWidth < 992) return;

            $equalHeightsWithChildren.each(function () {
                var $el = $(this);
                var parentHeight = $el.parent().height();
                var applyParentHeight = function applyParentHeight($subject) {
                    $subject = $($subject);
                    var offset = $subject.outerHeight(true) - $subject.height();
                    $subject.height(parentHeight - offset);
                };

                if ($el.outerHeight() === parentHeight) return;

                applyParentHeight($el);
                $.map($el.children(), applyParentHeight);
            });
        };

        var equalHeights = function equalHeights() {
            $equalHeights.css('height', 'auto');

            $equalHeights.each(function () {
                var $el = $(this);
                var parentHeight = $el.parent().height();

                if ($el.outerHeight(true) === parentHeight) return;

                var offset = $el.outerHeight(true) - $el.height();
                $el.height(parentHeight - offset);
            });
        };

        var $mapContainer = $("#map-container");
        var $directionsButton = $(".directions-button");
        var $mobileDirectionsButton = $(".mobile-directions-button");
        var $equalHeightsWithChildren = $("[equal-heights-with-children]");
        var $equalHeights = $("[equal-heights]");
        var coords = "44.5403,-78.5463";

        $mapContainer.on("click", function () {
            window.open('http://www.google.com/maps/place//@' + coords.toString().replace(" ", "").replace("(", "").replace(")", "") + ',12z');
        });

        $directionsButton.on("click", function () {
            window.open('http://www.google.com/maps/dir/current_location/' + coords);
        });

        $mobileDirectionsButton.on("click", function () {
            window.open('comgooglemaps://?daddr=' + coords.toString().replace(/[\(\) ]/g, "") + '&zoom=14&directionsmode=driving');
        });

        if (!Modernizr.flexbox) {
            equalHeightsWithChildren();
            $window.resize(equalHeightsWithChildren);
        }

        equalHeights();
        $window.resize(equalHeights);

        GoogleMapsLoader.KEY = 'AIzaSyCypNqQyQGZemSi94gQp0zTpr32ofYOUuQ';
        GoogleMapsLoader.load(function (google) {

            function initialize() {
                var mapCanvas = document.getElementById('map-container');
                var postcode = $(".venue-content").attr("data");
                var geocoder = new google.maps.Geocoder();
                var mapOptions = {
                    scrollwheel: false,
                    navigationControl: false,
                    mapTypeControl: false,
                    scaleControl: false,
                    draggable: false,
                    center: new google.maps.LatLng(44.5403, -78.5463),
                    zoom: 12,
                    disableDefaultUI: true,
                    panControl: false,
                    rotateControl: false,
                    zoomControl: false,
                    streetViewControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                var map = new google.maps.Map(mapCanvas, mapOptions);

                geocoder.geocode({ 'address': postcode }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        coords = results[0].geometry.location;
                        map.setCenter(coords);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });
                    } else {
                        $mapContainer.hide();
                    }
                });
            }

            google.maps.event.addDomListener(window, 'load', initialize);
        });
    }

    if ($body.hasClass("main")) {

        var $jumbotronTimeElement = $(".jumbotron-time-element");
        var $eventStartTime = $("#eventStartTime");

        var eventDate = new Date($eventStartTime.val());
        var offset = new Date().getTimezoneOffset();
        var updatedDate = new Date(eventDate.getTime() - offset * 60000);

        $window.scroll(function () {
            if ($document.scrollTop() > 50) {
                $body.addClass('shrink');
            } else if (!$body.hasClass("permanent-shrink")) {
                $body.removeClass('shrink');
            }

            if ($document.scrollTop() > 370) {
                $body.addClass('second-scroll-break');
            } else {
                $body.removeClass('second-scroll-break');
            }
        });

        $jumbotronTimeElement.eq(0).countdown(updatedDate, function (event) {
            $(this).html(event.strftime('%D<br /><span class="small">Days</span>'));
        });

        $jumbotronTimeElement.eq(1).countdown(updatedDate, function (event) {
            $(this).html(event.strftime('%H<br /><span class="small">Hours</span>'));
        });

        $jumbotronTimeElement.eq(2).countdown(updatedDate, function (event) {
            $(this).html(event.strftime('%M<br /><span class="small">Mins</span>'));
        });

        addCustomTextFooter();
    }

    if ($body.hasClass("event")) {

        var $timeElement = $(".time-element");
        var $eventStartTime = $("#eventStartTime");

        var eventDate = new Date($eventStartTime.val());
        var offset = new Date().getTimezoneOffset();
        var updatedDate = new Date(eventDate.getTime() - offset * 60000);

        var getNumberOfDays = function callback(now) {
            return '[In] ' + (this.diff(now, 'days') + 1) + ' [days]';
        };

        (function () {
            function updateDate() {
                $timeElement.html(moment(updatedDate).calendar(null, {
                    sameDay: '[Today,] MMMM D',
                    nextDay: '[Tomorrow,] MMMM D',
                    nextWeek: getNumberOfDays,
                    lastDay: '[Yesterday]',
                    lastWeek: '[Last] dddd',
                    sameElse: getNumberOfDays
                }));
                console.log('running');
                setTimeout(updateDate, 60000);
            }
            updateDate();
        })();
    }
});

},{"google-maps":7,"moment":10}],25:[function(require,module,exports){
"use strict";

var items = require("./resources/items");

var $body = $("body");
var $window = $(window);

$(function () {

    function beforeUnload() {

        window.localStorage.setItem("lastScrollPosition", parseInt($window.scrollTop() + 300));
    }

    if ($body.hasClass("items-list")) {

        /*
            Commented out until we can get it working
         */
        //if (window.localStorage.getItem("lastScrollPosition") && window.localStorage.getItem("lastPage").indexOf("/items/") > 0) {
        //    var prevLocation = window.localStorage.getItem("lastScrollPosition");
        //    $("html, body").animate({scrollTop: prevLocation}, 1000);
        //}
        //
        //$window.on("beforeunload", beforeUnload);

    }
});

},{"./resources/items":33}],26:[function(require,module,exports){
"use strict";

var $document = $(document);
var $window = $(window);
var $body = $("body");

var donor = require("./resources/donor");
var Dialogs = require("dialogs");
var Tools = require("./helpers/tools");
var security = require("./resources/security");
var ajax = require("./resources/ajax");

$document.ready(function () {
    if (security.isProtected($body) && window.location.href.indexOf("password") === -1) {
        security.checkEntryStatus();
    }
});

// Formatting the currency
Number.prototype.formatMoney = function (c, d, t) {
    var n = this,
        c = isNaN(c = Math.abs(c)) ? 2 : c,
        d = d == undefined ? "." : d,
        t = t == undefined ? "," : t,
        s = n < 0 ? "-" : "",
        i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
        j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

$(function () {

    // If the browser is less than display alert
    if (bowser.msie && parseFloat(bowser.version) < 9) {
        var dialogs = Dialogs({
            ok: "Ok",
            cancel: null,
            hostname: "Incompatible Browser",
            icon: "/microsite/images/alert-symbol.png"
        });
        dialogs.cancel();
        dialogs.alert("You are using an incompatible browser.  This site will not function correctly unless you download the latest version");
    }

    var $helpTab = $(".helpTab");
    var $helpTabButton = $helpTab.find($(".helpTabTitle"));
    var $helpModal = $("#helpModal");
    var $helpPage1 = $("#helpPage1");
    var $helpPage2 = $("#helpPage2");
    var $helpPage3 = $("#helpPage3");
    var $navXs = $(".nav-xs");
    var $pageTitleBarBack = $(".page-title-bar-back");
    var $backButton = $pageTitleBarBack.find("a");
    var $itemContainer = $(".item-container");
    var $mainItemContainer = $("#mainItemContainer");
    var $sponsorContainer = $(".sponsor-container");
    var $socialTabs = $(".social-tabs");
    var $helpModalRequestHelp = $('.help-modal-request-help');
    var $helpModalSend = $('.help-modal-send');
    var $emailTab = $('.email-tab');
    var $emailShareModal = $("#emailShareModal");
    var $btnEmail = $(".btn-email");
    var $emailSharePage1 = $("#emailSharePage1");
    var $emailSharePage2 = $("#emailSharePage2");
    var $emailShareModalSend = $(".email-share-modal-send");
    var $toggleLabel = $(".toggle-label");
    var $carouselNoScroll = $('.carousel-no-scroll');
    var $carousel = $(".carousel");
    var $helpForm = $("#helpForm");
    var $emailShareForm = $("#emailShareForm");
    var $enquiryFormButton = $(".enquiry-form-button");
    var $enquiryForm = $("#enquiryForm");
    var $enquiryFormConfirmation = $(".enquiry-form-confirmation");
    var $verificationHelp = $(".verification-help");
    var $allCheckboxes = $("input[type=checkbox]");
    var $personnelCarousel = $("#personnelCarousel");
    var $staffCarousel = $("#staffCarousel");
    var $volunteerCarousel = $("#volunteerCarousel");
    var $signInLink = $(".signin-link");
    var $passwordModal = $("#passwordModal");
    var $nextButton = $("#nextButton");
    var $logo = $(".navbar-brand").find("img");
    var $myAccountTextItem = $(".myaccount-text-item");

    $allCheckboxes.bootstrapSwitch({
        onText: "Yes",
        offText: "No",
        onColor: "primary"
    });

    $personnelCarousel.find(".item").eq(0).addClass("active");
    $staffCarousel.find(".item").eq(0).addClass("active");
    $volunteerCarousel.find(".item").eq(0).addClass("active");

    /*
    $carousel.on("swiperight",function(){
        var $this = $(this);
        $this.carousel("prev");
    });
     $carousel.on("swipeleft",function(){
        var $this = $(this);
        $this.carousel("next");
    });
    */

    function apiCall(url, method, data) {

        return $.ajax({
            url: "/API_1.5/" + url,
            beforeSend: function beforeSend(request) {
                request.setRequestHeader("Event", 1);
            },
            data: data,
            method: method.toUpperCase(),
            dataType: "json"
        }).fail(function (e) {
            console.log("API CALL FAIL: " + e);
        });
    }

    var setNavDropPos = function setNavDropPos() {
        $navXs.css("left", ($body.width() - 190) / 2);
    };

    var setHelpTabPos = function setHelpTabPos() {
        $helpTab.css("top", $window.height() / 2 - 175);
        if ($body.width() < 991) {
            $helpTab.css("top", $window.height() / 2 - 125);
        }
        if ($body.width() < 767) {
            $helpTab.css("top", $window.height() / 2 - 60);
        }
    };

    var setSocialTabsPos = function setSocialTabsPos() {
        $socialTabs.css("top", $window.height() / 2);
    };

    var showEmailShareModal = function showEmailShareModal() {
        $emailShareModal.modal('show');
        $emailSharePage1.show();
        $emailSharePage2.hide();
    };

    function helpModalSendClick(event) {
        event.preventDefault();
        $helpModalSend.off("click", helpModalSendClick);

        if ($helpForm.valid()) {
            var promise = ajax("/help", "post", $helpForm.serializeArray());
            $helpModalSend.html("Please Wait");
            promise.done(function (data) {
                $helpPage2.hide();
                $helpPage3.show();
                $helpModal.find(".modal-title").html("Thank You");
                $helpModalSend.html("Send");
            });
        }

        $helpModalSend.on("click", helpModalSendClick);
    }

    function enquiryFormButtonClick(event) {
        event.preventDefault();
        $enquiryFormButton.off("click", enquiryFormButtonClick);

        if ($enquiryForm.valid()) {
            var promise = ajax("/enquiry", "post", $enquiryForm.serializeArray());
            var currButtonText = $enquiryFormButton.html();
            $enquiryFormButton.html("Please Wait");
            promise.done(function (data) {
                $enquiryFormButton.html(currButtonText);
                $enquiryFormConfirmation.show();
                $("input[name=enquireName]").val("");
                $("input[name=enquireEmail]").val("");
                $("input[name=enquirePhone]").val("");
                $("input[name=enquireCharity]").val("");
            });
            promise.fail(function (e) {
                console.log(e);
            });
        }

        $enquiryFormButton.on("click", enquiryFormButtonClick);
    }

    function emailShareModalSendClick(event) {
        event.preventDefault();
        $emailShareModalSend.off("click", emailShareModalSendClick);

        if ($emailShareForm.valid()) {
            var promise = ajax("/share", "post", $emailShareForm.serializeArray());
            $emailShareModalSend.html("Please Wait");
            promise.done(function (data) {
                $emailSharePage1.hide();
                $("#recipientName").html($("#toname").val());
                $emailSharePage2.show();
                $emailShareModalSend.html("Send");
            });
        }

        $emailShareModalSend.on("click", emailShareModalSendClick);
    }

    function signOut(event) {

        var $this = $(event.target);

        var dialogs = Dialogs({
            ok: "Ok",
            cancel: null,
            hostname: "Sign Out",
            icon: "/microsite/images/alert-symbol.png"
        });
        dialogs.cancel();
        dialogs.confirm("Are you sure you want to sign out?", function (ok) {
            if (ok) {
                donor.signOut();
                $myAccountTextItem.hide();
                $signInLink.removeClass("signed-in").html("Sign In");
                window.location.href = "/microsite";
            }
        });
    }

    function showSignIn(event) {

        var $this = $(event.target);

        event.preventDefault();
        if (!$this.hasClass("signed-in")) {
            donor.showSignIn($passwordModal);
        } else {
            signOut(event);
        }
    }

    function checkUsername(event) {

        var $this = $(event.target);
        var $parentField = $this.closest(".ticket-guest-field");

        if ($("#username").valid()) {

            $parentField.removeClass("has-error");
            $parentField.removeClass("has-success");
            $parentField.find(".help-block").remove();

            donor.checkUsername($this.val()).done(function () {
                $parentField.addClass("has-success");
            }).fail(function () {
                $parentField.addClass("has-error");
                $parentField.find("input").after('<span id="helpBlock" class="help-block">That username is already taken, please choose another.</span>');
            });
        }
    }

    function signedIn() {

        var $signInLink = $("#signInLink");

        $signInLink.addClass("signed-in").html("Sign Out");
        $signInLink.show();
        $myAccountTextItem.show();

        $(".sign-in-option").hide();
    }

    function showRegOptions() {
        if (donor.hasCardOnFile() && donor.loggedIn()) {
            $("#unrecognised").collapse("hide");
            $(".card-form").show();
        } else if (donor.hasCardOnFile()) {
            $(".card-form").show();
        } else {
            $(".card-form").show();
        }
    }

    function unload() {
        window.localStorage.setItem("lastPage", window.location.href);
    }

    $helpForm.validate({
        rules: {
            name: "required",
            email: {
                required: true,
                email: true
            },
            subject: "required",
            message: "required"
        },
        messages: {
            name: "Please enter your full name",
            email: {
                required: "Please enter your email address",
                email: "Please enter a valid email address"
            },
            subject: "Please select a subject",
            message: "Please enter a message"
        }
    });

    $emailShareForm.validate({
        rules: {
            fromname: "required",
            fromemail: {
                required: true,
                email: true
            },
            toname: "required",
            toemail: {
                required: true,
                email: true
            },
            message: "required"
        },
        messages: {
            fromname: "Please enter your full name",
            fromemail: {
                required: "Please enter your email address",
                email: "Please enter a valid email address"
            },
            toname: "Please enter recipient full name",
            toemail: {
                required: "Please enter recipient email address",
                email: "Please enter a valid email address"
            },
            message: "Please enter a message"
        }
    });

    $enquiryForm.validate({
        rules: {
            enquireName: "required",
            enquireEmail: {
                required: true,
                email: true
            },
            enquirePhone: "required",
            enquireCharity: "required"
        },
        messages: {
            enquireName: "Please enter your full name",
            enquireEmail: {
                required: "Please enter your email address",
                email: "Please enter a valid email address"
            },
            enquirePhone: "Please enter a phone number",
            enquireCharity: "Please enter a charity name"
        }
    });

    window.addEventListener("resize", function () {
        setNavDropPos();
        setHelpTabPos();
        setSocialTabsPos();
    }, false);

    $verificationHelp.on("click", function () {
        $helpTabButton.trigger("click");
    });

    $helpTabButton.on("click", function () {
        $helpModal.modal('show');
        $helpPage1.show();
        $helpPage2.hide();
        $helpPage3.hide();
    });

    $helpModalRequestHelp.on("click", function () {
        $helpPage1.hide();
        $helpPage2.show();
    });

    $helpModalSend.on("click", helpModalSendClick);

    $enquiryFormButton.on("click", enquiryFormButtonClick);

    $(".sign-out").on("click", signOut);

    $backButton.on("click", function () {
        if (window.location.href.indexOf("thank-you") > 0) {
            if (Tools.getParameterByName("action") === "pledge" || Tools.getParameterByName("action") === "donation") {
                window.location.href = "/microsite/donate";
            }
            if (Tools.getParameterByName("action") === "bid" || Tools.getParameterByName("action") === "purchase") {
                window.location.href = "/microsite/items";
            }
            if (Tools.getParameterByName("action") === "tickets") {
                window.location.href = "/microsite/register-tickets";
            }
        } else {
            history.back(-1);
        }
    });

    setNavDropPos();
    setHelpTabPos();
    setSocialTabsPos();

    $(document).on("click", ".item-container", function () {
        var $this = $(this);

        if ($this.data('offset')) {
            window.localStorage.setItem('lastOffset', $this.data('offset'));
        }

        window.location.href = $this.attr("data-href");
    });

    $sponsorContainer.on("click", function () {
        window.location.href = $(this).attr("data-href");
    });

    $toggleLabel.on("click", function (event) {
        event.preventDefault();
        event.stopPropagation();
    });

    $carouselNoScroll.each(function () {
        $(this).carousel({
            interval: false
        });
    });

    $emailTab.on("click", function () {
        showEmailShareModal();
    });

    $btnEmail.on("click", function () {
        showEmailShareModal();
    });

    $emailShareModalSend.on("click", emailShareModalSendClick);

    $body.on("click", ".signin-link", showSignIn);

    $document.on("signed-in", signedIn);
    $document.on("show-reg-options", showRegOptions);
    $window.on("unload", unload);

    donor.load();
    if (donor.loggedIn()) {
        donor.populateRegFields();
        $document.trigger("signed-in");
    } else {
        $("#signInLink").show();
    }

    function getContainerHeight() {

        return $mainItemContainer.height();
    }

    if ($body.hasClass("items-list")) {

        $(window).on('scroll', function () {
            var y_scroll_pos = window.pageYOffset + 900;

            if (y_scroll_pos > getContainerHeight()) {
                $nextButton.trigger("click");
            }
        });
    }

    /**
     *  Calculate the margin above the logo
     * @returns {number}
     */
    function calcLogoMarginTop() {

        var logoMaxAllowedHeight = $logo.css("max-height");
        var logoActualHeight = $logo.css("height");
        var sizeDiff = parseInt(logoMaxAllowedHeight.substr(0, logoMaxAllowedHeight.length - 2)) - parseInt(logoActualHeight.substr(0, logoActualHeight.length - 2));

        return sizeDiff / 2;
    }

    //$logo.css("margin-top", calcLogoMarginTop());
});

},{"./helpers/tools":22,"./resources/ajax":31,"./resources/donor":32,"./resources/security":34,"dialogs":2}],27:[function(require,module,exports){
"use strict";

var $body = $("body");
var ajax = require('./resources/ajax');
var session = require("./resources/session");
var Dialogs = require("dialogs");
var Tools = require('./helpers/tools');
var donor = require("./resources/donor");

$(function () {

    // Declare variables
    var donorOrders = {};
    var $purchaseContainer = $("#purchaseContainer");
    var $myAccountDetails = $("#myAccountDetails");

    function displayDonorDetails(donorData) {

        var html = '<p><strong>' + donorData.firstname + ' ' + donorData.lastname + '</strong>';
        html += "msisdn" in donorData && donorData.msisdn ? '<br />' + donorData.msisdn : "";
        html += "email" in donorData && donorData.email ? '<br />' + donorData.email : "";
        html += '</p>';
        $myAccountDetails.html(html);
    }

    function getAndDisplayActivity() {
        var activityProm = donor.getActivity();
        activityProm.done(function (data) {
            donorOrders = data.body.orders.models;
            populateOrders(donorOrders);
        });
    }

    function populateOrders(donorOrders) {
        var html = "";

        for (var order in donorOrders) {
            var compiled = _.template($("#orderTemplate").html());
            html += compiled({ order: donorOrders[order] });
        }

        $purchaseContainer.html(html);
    }

    // Event listeners

    if ($body.hasClass("my-account")) {

        var donorData = donor.getData();
        if (!donorData) {
            window.location.href = '/microsite';
        }

        // Display donor details
        displayDonorDetails(donorData);

        // Get the donor activity
        getAndDisplayActivity();
    }
});

},{"./helpers/tools":22,"./resources/ajax":31,"./resources/donor":32,"./resources/session":35,"dialogs":2}],28:[function(require,module,exports){
'use strict';

var $body = $("body");
var ajax = require('./resources/ajax');
var security = require('./resources/security');

$(function () {

    var $passwordButton = $("#passwordButton");
    var $sitePassword = $("#sitePassword");

    if ($body.hasClass("password")) {
        var passwordButtonClick = function passwordButtonClick() {

            security.validatePassword($sitePassword.val()).fail(function () {
                $(".error").show();
            });
        };

        $passwordButton.on("click", passwordButtonClick);
    }
});

},{"./resources/ajax":31,"./resources/security":34}],29:[function(require,module,exports){
"use strict";

var donor = require("./resources/donor");

$(function () {

    var $giftAid = $(".giftaid");

    var $matchRegistration = $("#matchRegistration");
    var $paymentOptions = $(".payment-option");
    var $creditCardFields = $("#creditCardFields");
    var $paypalFields = $("#paypalFields");

    $(".ticket-form").add($("#registrationForm")).on("switchChange.bootstrapSwitch", ".giftaid", function (event) {
        var $this = $(event.target);
        var $giftAidInfo = $this.closest(".col-sm-6").find(".gift-aid-info");
        $giftAidInfo.toggleClass("closed");
    });

    $matchRegistration.on("switchChange.bootstrapSwitch", function () {

        var self = $(this);

        if (self.is(":checked")) {
            $("input[name=billingAddress1]").val($("input[name=address1]").val());
            $("input[name=billingAddress2]").val($("input[name=address2]").val());
            $("input[name=billingTown]").val($("input[name=town]").val());
            $("input[name=billingCounty]").val($("input[name=county]").val());
            $("input[name=billingPostcode]").val($("input[name=postcode]").val());
        } else {
            $("input[name=billingAddress1]").val("");
            $("input[name=billingAddress2]").val("");
            $("input[name=billingTown]").val("");
            $("input[name=billingCounty]").val("");
            $("input[name=billingPostcode]").val("");
        }
    });

    $paymentOptions.on("click", function () {
        var $self = $(this);

        if ($self.val() == "creditdebitcard") {
            $creditCardFields.show();
            $paypalFields.hide();
        } else {
            $creditCardFields.hide();
            $paypalFields.show();
        }
    });
});

},{"./resources/donor":32}],30:[function(require,module,exports){
"use strict";

var $body = $("body");
var ajax = require('./resources/ajax');

$(function () {

    var $changePasswordButton = $("#changePasswordButton");
    var $resetPasswordForm = $("#resetPasswordForm");

    if ($body.hasClass("reset-password")) {
        (function () {

            /**
             *  When reset button is clicked
             * @param event
             */

            var changePasswordButtonClick = function changePasswordButtonClick(event) {

                var $this = $(event.target);

                $this.off("click", changePasswordButtonClick);

                if ($resetPasswordForm.valid()) {

                    var data = {
                        password: $("input[name=password]").val(),
                        token: $("input[name=token]").val(),
                        id: $("input[name=id]").val()
                    };

                    var prom = ajax("/reset-password", "post", data);

                    prom.done(function () {
                        $(".content-main-box-header").html("Thank You");
                        $(".text-container").html("You have successfully changed your password.  Click the button below to sign in.<p>&nbsp;</p><p><button class='btn btn-lg btn-brand-secondary signin-link'>Sign In</button></p>");
                    });

                    prom.fail(function () {
                        $(".content-main-box-header").html("Sorry");
                        $(".text-container").html("Your password could not be changed at this time.  Please contact us by clicking on Help & Support.");
                    });
                }

                $this.on("click", changePasswordButtonClick);
            };

            jQuery.validator.addMethod("passwordRegex", function (value, element) {
                return this.optional(element) || /^(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}/.test(value);
            }, "Password must be minimum 8 characters and contain at least one uppercase letter, one number and one special character ($@!%*#?&)");

            $resetPasswordForm.validate({
                rules: {
                    password: {
                        required: true,
                        passwordRegex: {
                            param: true
                        }
                    },
                    password2: {
                        required: true,
                        equalTo: "#password",
                        passwordRegex: {
                            param: true
                        }
                    }
                }
            });

            $changePasswordButton.on("click", changePasswordButtonClick);
        })();
    }
});

},{"./resources/ajax":31}],31:[function(require,module,exports){
"use strict";

var url = require("../helpers/url");

module.exports = (function ($) {

    //@TODO Must make this dynamic
    var eventId = getEventId();
    var apiUrl = "/API_1.5";

    function getEventId() {
        var hostnames = {
            "localhost": 1,
            "162.13.9.5": 3149,
            "162.13.9.150": 5,
            "givesmartlegacy.dev": 1
        };

        return hostnames[location.hostname] || 1;
    }

    return function (endpoint, method, data) {

        data || (data = []);

        return $.ajax({
            url: url.protocol() + "//" + url.host() + apiUrl + endpoint,
            beforeSend: function beforeSend(request) {
                request.setRequestHeader("Event", eventId);
            },
            data: data,
            method: method.toUpperCase(),
            dataType: "json"
        });
    };
})(jQuery);

},{"../helpers/url":23}],32:[function(require,module,exports){
"use strict";

var ajax = require("../resources/ajax");

var donor = (function (id, data) {

    /**
     *  Retrieve donor from API
     * @param msisdn
     * @param email
     * @param password
     * @returns {*}
     */
    function getDonor(msisdn, email, password) {

        return ajax("/usersearch", "get", { msisdn: msisdn, email: email, password: password }).fail(function (e) {
            console.error(e);
        }).done(function (data) {
            setId(data.body.model.id);
            setData(data.body.model);
            saveDonor();
        });
    }

    /**
     *  Check for existance of username
     * @param username
     * @returns {*}
     */
    function checkUsername(username) {

        return ajax("/usernamesearch", "get", { username: username });
    }

    /**
     *  Register a donor through the API
     * @param data
     * @returns {*}
     */
    function registerDonor(data) {

        return ajax("/user", "post", data).done(function (data) {
            setId(data.body.model.id);
            setData(data.body.model);
            saveDonor();
        });
    }

    /**
     *  Register a donor through the API
     * @param data
     * @returns {*}
     */
    function updateDonor(data) {

        data.user = id;

        return ajax("/user", "put", data).done(function (data) {
            setId(data.body.model.id);
            setData(data.body.model);
            saveDonor();
        });
    }

    /**
     *  Place bid for the selected donor
     * @param bidData
     * @param $confirmationModal
     * @param $failureModal
     * @returns {*}
     */
    function placeBid(bidData, $confirmationModal, $failureModal) {

        if (Array.isArray(bidData)) {
            bidData.push({ name: "user", value: id });
        } else {
            bidData.user = id;
        }

        return ajax("/bid", "post", bidData).done(function (data) {
            if (typeof data.body.model.id !== "undefined") {

                var action = "bid";
                var itemName = data.body.model.itemName;
                var itemId = data.body.model.itemId;

                if (data.body.model.purchased == "1") {
                    action = "purchase";
                }

                var bid = $("input[name=amount]").val();

                if (parseFloat(bid) >= parseFloat(data.body.model.amount)) {
                    window.location.href = "/microsite/thank-you?amount=" + data.body.model.amount + "&action=" + action + "&itemName=" + itemName;
                } else {
                    window.location.href = "/microsite/thank-you?amount=" + data.body.model.amount + "&action=outbidmax&itemName=" + itemName + "&itemId=" + itemId;
                }
            } else {
                $failureModal.modal("show");
            }
        }).fail(function (request) {
            var data = JSON.parse(request.responseText);
            var error = data.body.message.message;
            $failureModal.find(".confirmation-event").html(error);
            $failureModal.modal("show");
        });
    }

    /**
     *  Place donation for the selected donor
     * @param donateData
     * @param $confirmationModal
     * @param $failureModal
     * @param paymentType
     * @returns {*}
     */
    function placeDonation(donateData, $confirmationModal, $failureModal) {

        if (Array.isArray(donateData)) {
            donateData.push({ name: "user", value: id });
        } else {
            donateData.user = id;
        }

        return ajax("/donate", "post", donateData).done(function (data) {

            if (typeof data.body.model.donation !== "undefined" && data.body.model.donation.id) {
                window.location.href = "/microsite/thank-you?amount=" + data.body.model.donation.amount + "&action=pledge";
            } else {
                $failureModal.modal("show");
            }
        }).fail(function (e) {
            console.log("Donation Failed: " + e);
            $failureModal.modal("show");
        });
    }

    /**
     *  Place donation and pay for the selected donor
     * @param donateData
     * @param $confirmationModal
     * @param $failureModal
     * @param paymentType
     * @returns {*}
     */
    function placeDonationAndPay(donateData, $confirmationModal, $failureModal) {

        if (Array.isArray(donateData)) {
            donateData.push({ name: "user", value: id });
        } else {
            donateData.user = id;
        }

        return ajax("/donateandpay", "post", donateData).done(function (data) {
            if (typeof data.body.model.status !== "undefined" && data.body.model.status === "Paid") {
                window.location.href = "/microsite/thank-you?amount=" + data.body.model.total + "&action=donation";
            } else {
                $failureModal.modal("show");
            }
        }).fail(function (e) {
            console.log("Donation Failed: " + e);
            $failureModal.modal("show");
        });
    }

    /**
     *  Add card on file for the selected donor
     * @param cardData
     * @returns {*}
     */
    function addCard(cardData) {

        cardData.push({ name: "user", value: id });
        return ajax("/user/addcard", "post", cardData).fail(function (e, status, request) {
            console.error(e, status, request);
        });
    }

    function showSignIn($element) {

        $element.modal("show");
    }

    function saveDonor() {

        var donorObj = {
            id: id,
            data: data,
            timestamp: new Date().getTime(),
            domain: location.hostname
        };

        window.localStorage.setItem("donor", JSON.stringify(donorObj));
    }

    function signOut() {

        id = 0;
        data = {};
        window.localStorage.removeItem("donor");
    }

    function loadDonor() {

        var donorObj = JSON.parse(window.localStorage.getItem("donor"));

        if (donorObj) {

            var lastSave = new Date(parseInt(donorObj.timestamp));
            var currTime = new Date();

            var dateDifference = currTime - lastSave;
            var expiryTime = 60 * 60 * 1000;

            if (dateDifference < expiryTime && donorObj.domain === location.hostname) {

                setId(donorObj.id);
                setData(donorObj.data);
            } else {

                window.localStorage.removeItem("donor");
            }
        }
    }

    function getId() {

        return parseInt(id);
    }

    function getData() {

        return data;
    }

    function setId(param) {

        id = param;
    }

    function setData(params) {

        data = params;
    }

    function setDataParam(param, value) {

        data[param] = value;
    }

    function loggedIn() {

        return id > 0;
    }

    function hasCardOnFile() {

        var tokenLength = 0;

        if (data.token) {
            tokenLength = data.token.length;
        }

        return tokenLength > 0;
    }

    function payUnpaidOrder(paymentType) {

        var unpaidOrder = order.getUnpaidOrder(id);
    }

    function populateRegFields() {

        var $inputEmail = $("input[name=email]").eq(0);

        $("input[name=firstname]").eq(0).val(data['firstname']);
        $("input[name=lastname]").eq(0).val(data['lastname']);
        $("input[name=msisdn]").eq(0).val(data['msisdn'].replace("+", "00").replace(/-/g, ""));
        $inputEmail.val(data['email']);
        $("input[name=address1]").eq(0).val(data['address1']);
        $("input[name=address2]").eq(0).val(data['address2']);
        $("input[name=town]").eq(0).val(data['town']);
        $("input[name=county]").eq(0).val(data['county']);
        $("input[name=postcode]").eq(0).val(data['postcode']);
        $("input[name=company]").eq(0).val(data['company']);

        $("input[name=password]").closest(".form-group").hide();
        $("input[name=password2]").closest(".form-group").hide();
        $inputEmail.closest(".form-group").hide();
        $(".account-create-message").hide();

        for (var answer in data["registrationAnswers"]) {

            var self = data["registrationAnswers"][answer];

            if ($("input[name=regoption" + self["id"] + "]").eq(0).length) {
                $("input[name=regoption" + self["id"] + "]").eq(0).val(self["answer"]);
            }

            if ($("select[name=regoption" + self["id"] + "]").eq(0).length) {
                $("select[name=regoption" + self["id"] + "]").eq(0).val(self["answer"]);
            }
        }

        if (data["anonymous"] == 1) {
            $("input[name=anonymous]").eq(0).bootstrapSwitch("state", true, true);
        }

        if (data["volunteer"] == 1) {
            $("input[name=volunteer]").eq(0).bootstrapSwitch("state", true, true);
        }
    }

    function registeredForEvent() {

        return data["registeredForEvent"];
    }

    function getActivity() {

        var activityData = {
            type: "orders",
            user: id
        };

        return ajax("/activity", "post", activityData).fail(function (e) {
            console.error(e);
        });
    }

    return {
        getId: getId,
        setId: setId,
        getData: getData,
        setData: setData,
        setDataParam: setDataParam,
        get: getDonor,
        register: registerDonor,
        update: updateDonor,
        placeBid: placeBid,
        placeDonation: placeDonation,
        placeDonationAndPay: placeDonationAndPay,
        addCard: addCard,
        showSignIn: showSignIn,
        checkUsername: checkUsername,
        loggedIn: loggedIn,
        signOut: signOut,
        load: loadDonor,
        hasCardOnFile: hasCardOnFile,
        payUnpaidOrder: payUnpaidOrder,
        populateRegFields: populateRegFields,
        registeredForEvent: registeredForEvent,
        getActivity: getActivity
    };
})();

module.exports = donor;

},{"../resources/ajax":31}],33:[function(require,module,exports){
"use strict";

var ajax = require('./ajax');

var dictionary = {
    type: ["silent", "instant", "live", "vote", "pledge", "winning", "losing", "sold", "unsold", "buynows", "favourite", "nobids"],
    sort: ["valueDisplayAsc", "valueDisplayDesc"],
    category: "category"
};

/**
 *
 */
module.exports = (function (_) {

    var queryParams = [];
    var stickyParams = [];

    /**
     * Build the query object
     * @param filterable
     * @param search
     * @param offset
     * @returns {string}
     */
    function buildFilterParams(filterable, search, offset) {

        if (_.indexOf(dictionary.type, filterable) !== -1) {
            queryParams.push({ name: "type", value: filterable });
        } else if (_.indexOf(dictionary.sort, filterable) !== -1) {
            queryParams.push({ name: "type", value: "silent" });
            queryParams.push({ name: "sort", value: filterable.replace("Asc", "").replace("Desc", "") });
        } else if (filterable && filterable.indexOf("category.") !== -1) {
            queryParams.push({ name: "category", value: filterable.replace("category.", "") });
        }

        if (search) {
            queryParams.push({ name: "search", value: search });
        }

        if (offset) {
            queryParams.push({ name: 'offset', value: offset });
        }
    }

    /**
     * Build the query string
     * @returns {string}
     */
    function buildQueryString() {
        var qString = "?";
        for (var key in queryParams) {
            qString += queryParams[key].name + "=" + encodeURIComponent(queryParams[key].value) + "&";
        }

        for (var key in stickyParams) {
            qString += stickyParams[key].name + "=" + encodeURIComponent(stickyParams[key].value) + "&";
        }

        return qString.substring(0, qString.length - 1);
    }

    /**
     * Make a call to the API
     * @param queryString
     * @returns {*}
     */
    function makeCall() {
        var self = this;
        var dfd = new $.Deferred();

        this.loading = true;

        ajax("/item" + buildQueryString(), "GET").done(function (data) {
            self.loading = false;
            self.currentPage = data.body.currentPage;
            self.lastPage = data.body.models.length > 0 ? data.body.lastPage : self.currentPage;
            self.items = data.body.models;

            dfd.resolve(self);
        });

        return dfd.promise();
    }

    function getSingleItem(id) {

        return ajax("/item/" + id, "GET");
    }

    /**
     *
     */
    function updatePage(page) {

        var param = _.find(queryParams, { name: "page" });

        if (param) {
            param.value = page;
        } else {
            queryParams.push({ name: "page", value: page });
        }
    }

    return {
        currentPage: 1,
        lastPage: 1,
        items: [],
        get: function get(filterable, search, offset, clear) {
            if (clear) {
                queryParams = [];
            }

            buildFilterParams(filterable, search, offset);
            return makeCall.call(this);
        },
        getSingle: function getSingle(id) {
            return getSingleItem.call(this, id);
        },
        next: function next() {
            updatePage(this.currentPage + 1);
            return makeCall.call(this);
        },
        previous: function previous() {
            updatePage(this.currentPage - 1);
            return makeCall.call(this);
        },
        clearPagination: function clearPagination() {
            this.currentPage = 1;
            this.lastPage = 1;
            updatePage(this.currentPage);
            return this;
        },
        setCurrentPage: function setCurrentPage(page) {
            this.currentPage = page;
            return this;
        },
        clearOffset: function clearOffset() {
            _.remove(queryParams, function (current) {
                return current.name == 'offset';
            });
        },
        clearSearch: function clearSearch() {
            queryParams = _.reject(queryParams, { name: "search" });
        },
        stickyParam: function stickyParam(type, value) {
            stickyParams.push({ name: type, value: value });
        }
    };
})(_);

},{"./ajax":31}],34:[function(require,module,exports){
"use strict";

var ajax = require("./ajax");

var security = (function () {

    /**
     *  Is the site password protected
     * @param element
     * @returns {boolean}
     */
    function isProtected(element) {

        return element.attr("data-p") === "1";
    }

    /**
     *  Check the given password
     * @param password
     */
    function validatePassword(password) {

        var data = {
            password: password
        };

        return ajax("/event/password", "post", data).done(function () {

            grantEntry();
        });
    }

    /**
     *  Grant entry to site and store login time
     */
    function grantEntry() {

        var data = {
            timestamp: new Date().getTime()
        };

        window.localStorage.setItem("loggedIn", JSON.stringify(data));
        window.location.href = "/microsite";
    }

    /**
     *  Check if user is logged in
     */
    function checkEntryStatus() {

        var storedLoginTime = window.localStorage.getItem("loggedIn");

        if (storedLoginTime) {
            var loggedIn = parseInt(JSON.parse(storedLoginTime).timestamp);
            var currTime = new Date().getTime();
            var loggedInTime = new Date(loggedIn);

            if (currTime - loggedInTime > 60 * 60 * 1000) {
                retractEntry();
            }
        } else {
            retractEntry();
        }
    }

    /**
     *  Log the user out
     */
    function retractEntry() {

        window.localStorage.removeItem("loggedIn");
        window.location.href = "/microsite/password";
    }

    return {
        isProtected: isProtected,
        validatePassword: validatePassword,
        checkEntryStatus: checkEntryStatus
    };
})();

module.exports = security;

},{"./ajax":31}],35:[function(require,module,exports){
"use strict";

var Dialogs = require("dialogs");
var dialogs = Dialogs({
    ok: "Yes, Extend Time",
    cancel: "No",
    hostname: "Booking",
    icon: "/microsite/images/alert-symbol.png"
});

var session = (function () {

    var numberOfMinutes = 15;

    /**
     *  Start a session and save the session end time to local storage
     */
    function startSession() {

        var currDate = new Date();
        var numberOfMilliseconds = numberOfMinutes * 60 * 1000;

        var endDate = new Date(currDate.getTime() + numberOfMilliseconds);

        localStorage.setItem("sessionEndTime", endDate.getTime());
    }

    /**
     *  Load a session end time from local storage
     * @returns {Date}
     */
    function loadSession() {

        var newTime = parseInt(localStorage.getItem("sessionEndTime"));

        return new Date(newTime);
    }

    /**
     *  Clear the session from local storage
     */
    function endSession() {

        localStorage.removeItem("sessionEndTime");
    }

    /**
     *  Calculate the remaining time between now and the session end
     * @returns {number}
     */
    function remaining() {

        var remainingTimeInSeconds = Math.round((loadSession().getTime() - new Date().getTime()) / 1000);

        return remainingTimeInSeconds > 0 ? remainingTimeInSeconds : 0;
    }

    /**
     *  Format the output of the session remaining time
     * @returns {{minutes: number, seconds: number}}
     */
    function formatRemaining() {

        var minutes = Math.floor(remaining() / 60);
        var seconds = Math.round(remaining() - minutes * 60);

        return {
            minutes: minutes,
            seconds: seconds
        };
    }

    /**
     *  Display the session remaining time and trigger restart of session if required
     * @param $element
     * @param ticketCollection
     */
    function sessionRemaining($element, ticketCollection) {

        if (remaining() > 0) {

            // Commented out the visual update
            //$element.html(formatRemaining().minutes + " minutes, " + formatRemaining().seconds + " seconds");

        } else {

                restartTicketProcess(ticketCollection);
            }

        if (remaining() === 30 || remaining() === 60) {

            dialogs.cancel();
            dialogs.confirm("You have less than " + remaining() + " seconds left to complete your booking.  Do you wish to extend your time?", function (ok) {
                if (ok) {
                    var oldSession = parseInt(session.load().getTime());
                    startSession();
                    var reserveTicketData = ticketCollection.generateReserveTicketData(oldSession);
                    ticketCollection.reserveTickets(reserveTicketData);
                }
            });
        }
    }

    /**
     *  Restart the whole ticketing process
     */
    function restartTicketProcess(ticketCollection) {

        ticketCollection.clear();
        dialogs.cancel();
        endSession();
        if (window.location.href.indexOf("guests") > 0 || window.location.href.indexOf("summary") > 0) {
            $(window).off("beforeunload", session.unloadMessage);
            $(window).off("unload", ticketCollection.unloadAndClear());
            window.location.href = "/microsite/register-tickets";
        }
    }

    /**
     *  Check if the session has been started
     * @returns {boolean}
     */
    function isStarted() {

        return localStorage.getItem("sessionEndTime") !== null;
    }

    /**
     *  Return the unload message
     * @returns {string}
     */
    function unloadMessage() {

        return "Your details will not be saved";
    }

    return {
        start: startSession,
        load: loadSession,
        end: endSession,
        remaining: remaining,
        formatRemaining: formatRemaining,
        sessionRemaining: sessionRemaining,
        isStarted: isStarted,
        numberOfMinutes: numberOfMinutes,
        restartTicketProcess: restartTicketProcess,
        unloadMessage: unloadMessage
    };
})();

module.exports = session;

},{"dialogs":2}],36:[function(require,module,exports){
"use strict";

var $body = $("body");
var Dialogs = require("dialogs");

$(function () {

    var $showMoreButton = $(".show-more-button");
    var $singleItemDescription = $(".single-item-description");
    var $uncontainedImage = $(".single-item-image").find(".item-detail-image");
    var $magGlass = $(".mag-glass");
    var $quantity = $("select[name=quantity]");

    var launchImageModal = function launchImageModal() {
        $('#imageModal').modal();
    };

    $singleItemDescription.trigger("isTruncated", function (isTruncated) {
        if (isTruncated) {
            $(".single-item-show-more").show();
        }
    });

    function showMore() {
        $showMoreButton.off("click", showMore);
        $singleItemDescription.toggleClass("truncated");
        if ($singleItemDescription.hasClass("truncated")) {
            $showMoreButton.html('Show More');
        } else {
            $singleItemDescription.trigger("originalContent", function (content) {
                $singleItemDescription.empty().append(content);
            });
            $showMoreButton.html('Show Less');
        }
        $showMoreButton.on("click", showMore);
    }

    function itemQuantityUpdate(event) {

        var $this = $(event.target);
        var $amountInput = $("input[name=amount]");

        $amountInput.val(parseInt($this.val()) * parseInt($amountInput.attr("data-price")));
    }

    $showMoreButton.on("click", showMore);

    $uncontainedImage.on("click", function () {
        launchImageModal();
    });

    $magGlass.on("click", function () {
        launchImageModal();
    });

    $quantity.on("change", itemQuantityUpdate);
});

},{"dialogs":2}],37:[function(require,module,exports){
"use strict";

var $body = $("body");
var $window = $(window);
var Tools = require("./helpers/tools");

$(function () {

    if ($body.hasClass("thank-you")) {
        var unload = function unload() {

            //if (window.location.href.indexOf("thank-you") > 0) {
            //    if (Tools.getParameterByName("action") === "pledge" || Tools.getParameterByName("action") === "donation") {
            //        window.location.href = "/microsite/donate";
            //    }
            //    if (Tools.getParameterByName("action") === "bid" || Tools.getParameterByName("action") === "purchase") {
            //        window.location.href = "/microsite/items";
            //    }
            //    if (Tools.getParameterByName("action") === "tickets") {
            //        window.location.href = "/microsite/register-tickets";
            //    }
            //} else {
            //    history.back(-1);
            //}

        };

        $window.on("unload", unload);
    }
});

},{"./helpers/tools":22}],38:[function(require,module,exports){
"use strict";

var ticketCollection = require("./components/ticketCollection");
var session = require("./resources/session");
var ajax = require("./resources/ajax");
var ticketOrder = require("./components/ticketOrder");
var ScrollTo = require("./helpers/scroll-to");

$(function () {

    // Declare variables
    var $body = $("body");
    var $detailButton = $(".detail-button");
    var $ticketSessionCountdown = $("#ticketSessionCountdown");
    var tickets;
    var loadedTicketCollection;
    var $ticketType = $(".ticket-type");
    var $guestArea = $("#guestArea");
    var $skipStep = $("#skipStep");
    var $confirmAndPay = $("#confirmAndPay");

    /**
     *  Update the ticket type selection based on the ticket types selected and the previously selected tickets
     */
    function populateTickets() {

        $ticketType = $(".ticket-type");

        // For each ticket type selector
        for (var t = 0; t < $ticketType.length; t++) {

            // Remove all options that are not selected and are not equal to ""
            $ticketType.eq(t).find("option[value!='']").not(":selected").remove();

            // For each ticket type in loaded ticket collection
            for (var ticket in tickets) {
                // If there are still tickets remaining
                if (previouslySelectedTickets(tickets[ticket].id) < tickets[ticket].seats) {
                    // Do not re-add the already selected option
                    if ($ticketType.eq(t).find("option:selected").val() != tickets[ticket].id) {
                        $ticketType.eq(t).append("<option value='" + tickets[ticket].id + "'>" + tickets[ticket].name + "</option>");
                    }
                }
            }
        }
    }

    /**
     *  Get the ticket options from the selected tickets
     * @param id
     * @returns {{}}
     */
    function getTicketOptions(id) {

        var outputArray = {};

        for (var ticket in tickets) {
            if (tickets[ticket].id == id) {
                outputArray = JSON.parse(tickets[ticket].options);
            }
        }

        return outputArray;
    }

    /**
     *  Triggered when the ticket type is changed. Updates the available tickets and the dom
     * @param event
     */
    function ticketTypeChange(event) {
        // Add/display the ticket options
        updateTicketOptions(event);
        // Show the registration fields
        revealGuestFields(event);
        // Update the ticket type selector with the available tickets
        populateTickets();
    }

    /**
     *  Start the ticket options update
     * @param event
     */
    function updateTicketOptions(event) {

        var $this = $(event.target);

        var options = getTicketOptions($this.val());

        buildOptionsHtml(options, $this);
    }

    /**
     *  Build the html for the ticket options
     * @param options
     * @param $target
     */
    function buildOptionsHtml(options, $target) {

        var $this = $target;
        var outputHtml = "";
        var $registrationQuestions = $this.closest(".registration-form-top").find(".ticket-registration-questions");
        var thisFormIndex = $("body").find(".ticket-registration-questions").index($registrationQuestions);

        for (var option in options) {
            var compiled = "";
            if (options[option].optionType === "text") {
                compiled = _.template($("#ticketQuestionInput").html());
            } else {
                compiled = _.template($("#ticketQuestionSelect").html());
            }

            var required = thisFormIndex === 0 ? options[option].required : false;

            outputHtml += compiled({ x: option, option: options[option], required: required });
        }

        $registrationQuestions.html(outputHtml);
    }

    /**
     *  Unhide the guest fields
     * @param event
     */
    function revealGuestFields(event) {

        var $this = $(event.target);

        if ($this.val() != "") {
            $this.closest(".registration-form-top").find(".ticket-guest-field").show();
        } else {
            $this.closest(".registration-form-top").find(".ticket-guest-field").hide();
        }
    }

    /**
     *  Create all the guest forms based on the number of seats
     * @param numberOfGuests
     */
    function createGuestForms(numberOfGuests) {

        for (var x = 1; x < numberOfGuests; x++) {

            var compiled = _.template($("#guestRegistration").html());
            $guestArea.append(compiled({ x: x }));
        }

        $guestArea.find(".ticket-guest-field").hide();

        var $allCheckboxes = $("input[type=checkbox]");

        $allCheckboxes.bootstrapSwitch({
            onText: "Yes",
            offText: "No",
            onColor: "primary"
        });

        if (numberOfGuests == 1) {
            $(".ticket-setup-initial-question").hide();
            $("#guestDetailArea").hide();
        }
    }

    /**
     *  Make the Skip this step button change it's text when clicked
     * @param event
     */
    function skipStepClick(event) {

        var $this = $(event.target);

        if ($this.html() == "Skip this Step") {
            $this.html("Enter Details");
        } else {
            $this.html("Skip this Step");
        }
    }

    /**
     *  Work out and return the number of times each ticket type has been selected
     * @param ticketId
     * @returns {number}
     */
    function previouslySelectedTickets(ticketId) {

        var count = 0;

        $(".ticket-type").each(function () {
            if ($(this).val() != "" && $(this).val() == ticketId) {
                count++;
            }
        });

        return count;
    }

    /**
     *  Work out the list of ticket type ids that can be selected from, in case the ticket type needs to be auto-populated when saving
     * @returns {Array}
     */
    function listOfAvailableTicketTypesForSaving() {

        var availableTicketArray = [];
        var tickets = loadedTicketCollection.tickets;
        for (var t = 0; t < tickets.length; t++) {
            for (var i = 0; i < parseInt(tickets[t]["seats"]); i++) {
                availableTicketArray.push(tickets[t]["id"]);
            }
        }

        return availableTicketArray;
    }

    /**
     *  Save the ticket details to the ticketOrder model
     */
    function saveTicketDetails() {

        var ticketDetails = [];
        var ticketTypesAvailable = listOfAvailableTicketTypesForSaving();

        for (var v = 0; v < loadedTicketCollection.totalSeats; v++) {

            var selectedOptions = [];
            for (var o = 0; o < 5; o++) {
                selectedOptions.push($("[name=option" + o + "]").eq(v).val());
            }

            var regOptions = [];
            var $regFormHolder = $(".registration-form-holder");
            $regFormHolder.eq(v).find("input").each(function () {
                var $this = $(this);
                if ($this.attr("name").substring(0, 9) === "regoption" && $this.val() != "") {
                    regOptions.push({
                        name: $this.attr("name"),
                        value: $this.val()
                    });
                }
            });
            $regFormHolder.eq(v).find("select").each(function () {
                var $this = $(this);
                if ($this.attr("name").substring(0, 9) === "regoption" && $this.val() != "") {
                    regOptions.push({
                        name: $this.attr("name"),
                        value: $this.val()
                    });
                }
            });

            // If the ticketType hasn't been selected, then grab one from the available list
            var ticketType;
            if ($("select[name=ticketType]").eq(v).val() != "") {
                ticketType = $("select[name=ticketType]").eq(v).val();
                for (var y = 0; y < ticketTypesAvailable.length; y++) {
                    if (ticketType == ticketTypesAvailable[y]) {
                        ticketTypesAvailable.splice(y, 1);
                        break;
                    }
                }
            } else {
                ticketType = ticketTypesAvailable[0];
                ticketTypesAvailable.splice(0, 1);
            }

            ticketDetails.push({
                ticketType: ticketType,
                firstname: $("input[name=firstname]").eq(v).val(),
                lastname: $("input[name=lastname]").eq(v).val(),
                msisdn: $("input[name=msisdn]").eq(v).val(),
                email: $("input[name=email]").eq(v).val(),
                company: $("input[name=company]").eq(v).val(),
                address1: $("input[name=address1]").eq(v).val(),
                address2: $("input[name=address2]").eq(v).val(),
                town: $("input[name=town]").eq(v).val(),
                county: $("input[name=county]").eq(v).val(),
                postcode: $("input[name=postcode]").eq(v).val(),
                anonymous: $("input[name=anonymous]").eq(v).prop("checked"),
                volunteer: $("input[name=volunteer]").eq(v).prop("checked"),
                texts: $("input[name=texts]").eq(v).prop("checked"),
                register: $("input[name=register]").eq(v).prop("checked"),
                preAuth: $("input[name=preAuth]").eq(v).prop("checked"),
                giftaid: $("input[name=giftaid]").eq(v).prop("checked"),
                giftaidAddress: $("input[name=giftaidAddress]").eq(v).val(),
                giftaidPostcode: $("input[name=giftaidPostcode]").eq(v).val(),
                password: $("input[name=password]").eq(v).val(),
                options: selectedOptions,
                regOptions: regOptions
            });
        }

        ticketOrder.save(ticketDetails);
    }

    /**
     *  When the confirm button is clicked
     * @param event
     */
    function confirmClick(event) {

        var $this = $(event.target);

        $this.off("click", confirmClick);

        if (validateTickets()) {
            $(window).off("beforeunload", session.unloadMessage);
            $(window).off("unload", ticketCollection.unloadAndClear);
            saveTicketDetails();
            window.location.href = $this.attr("data-href");
        }

        $this.on("click", confirmClick);
    }

    /**
     *  Validate the ticket details are correct
     * @returns {boolean}
     */
    function validateTickets() {

        var valid = true;

        jQuery.validator.addMethod("passwordRegex", function (value, element) {
            return this.optional(element) || /^(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}/.test(value);
        }, "Password must be minimum 8 characters and contain at least one uppercase letter, one number and one special character ($@!%*#?&)");

        jQuery.validator.addMethod("noSpaceRegex", function (value, element) {
            return this.optional(element) || !/^\s{1,}/gm.test(value);
        }, "This field is required");

        jQuery.validator.addMethod("notEqual", function (value, element, param) {
            var nomatch = true;
            $(param).not(element).each(function () {
                if ($(this).val() === value) {
                    nomatch = false;
                }
            });
            return this.optional(element) || nomatch;
        }, "You have entered this already, please enter another or leave blank");

        jQuery.validator.addMethod("notEqualMsisdn", function (value, element, param) {
            var nomatch = true;
            $(param).not(element).each(function () {
                var strippedVal = value.replace(/[\D]/gi, '');
                var thisStrippedVal = $(this).val().replace(/[\D]/gi, '');
                if (strippedVal === thisStrippedVal) {
                    nomatch = false;
                }
            });
            return this.optional(element) || nomatch;
        }, "You have entered this already, please enter another or leave blank");

        $(".ticket-form").each(function () {

            var $this = $(this);

            var t = $(".ticket-form").index($this);

            if (t === 0) {

                $this.validate({
                    invalidHandler: function invalidHandler(event, validator) {
                        // 'this' refers to the form
                        var errors = validator.numberOfInvalids();
                        if (errors) {
                            ScrollTo($(validator.errorList[0].element));
                        }
                    },
                    rules: {
                        password: {
                            required: true,
                            passwordRegex: {
                                param: true
                            }
                        },
                        password2: {
                            required: true,
                            equalTo: "#password",
                            passwordRegex: {
                                param: true
                            }
                        },
                        email: {
                            email: true
                        },
                        address1: {
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        town: {
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        county: {
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        postcode: {
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        company: {
                            noSpaceRegex: {
                                param: true
                            }
                        }
                    }
                });

                if (!$this.valid()) {
                    valid = false;
                }

                if ($this.find("input[name=password]").is(":visible") && $body.hasClass("ticket-setup")) {
                    $this.find("#email").rules("remove");
                    $this.find("#email").rules("add", {
                        required: true,
                        email: true,
                        remote: {
                            url: "/API_1.5/usernamesearch",
                            type: "get",
                            data: {
                                username: function username() {
                                    return $this.find("#email").val();
                                }
                            },
                            dataType: "text",
                            beforeSend: function beforeSend(xhr) {
                                xhr.setRequestHeader("Event", $this.find("input[name=event]").val());
                            }
                        }
                    });
                }
            } else {

                $this.validate({
                    invalidHandler: function invalidHandler(event, validator) {
                        // 'this' refers to the form
                        var errors = validator.numberOfInvalids();
                        if (errors) {
                            ScrollTo($(validator.errorList[0].element));
                        }
                    },
                    rules: {
                        firstname: {
                            required: true,
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        lastname: {
                            required: true,
                            noSpaceRegex: {
                                param: true
                            }
                        },
                        msisdn: {
                            notEqualMsisdn: "input[name=msisdn]"
                        },
                        email: {
                            notEqual: "input[name=email]"
                        }
                    }
                });

                if (!$this.valid()) {
                    valid = false;
                }
            }
        });

        return valid;
    }

    /**
     *  Set the purchaser ticket type if there is only one ticket available
     * @param tickets
     */
    function setPurchaserTicketType(tickets) {

        var $selectTicketType = $("select[name=ticketType]");

        if (tickets.length === 1) {
            $selectTicketType.eq(0).find("option").prop("selected", true);
            $selectTicketType.eq(0).trigger("change");
        }
    }

    // Event listeners
    $(".ticket-setup").on("change", ".ticket-type", ticketTypeChange);
    $skipStep.on("click", skipStepClick);
    $confirmAndPay.on("click", confirmClick);

    if ($body.hasClass("ticket-setup")) {

        $(window).on("beforeunload", session.unloadMessage);
        $(window).on("unload", ticketCollection.unloadAndClear);

        // start the checking of the remaining time
        setInterval(function () {
            session.sessionRemaining($ticketSessionCountdown, ticketCollection);
        }, 1000);

        // Load in the previously saved ticket selection
        loadedTicketCollection = ticketCollection.load();
        tickets = loadedTicketCollection.tickets;

        // Create all the guest forms
        createGuestForms(loadedTicketCollection.totalSeats);

        // Populate the initial ticket type selections
        populateTickets();

        // Set the first ticket type to be selected for the purchaser if there is only one ticket type available
        setPurchaserTicketType(tickets);
    }
});

},{"./components/ticketCollection":18,"./components/ticketOrder":19,"./helpers/scroll-to":21,"./resources/ajax":31,"./resources/session":35}],39:[function(require,module,exports){
'use strict';

var $body = $("body");
var ticketCollection = require('./components/ticketCollection');
var ticketOrder = require('./components/ticketOrder');
var session = require("./resources/session");
var ajax = require("./resources/ajax");
var Dialogs = require("dialogs");
var ScrollTo = require("./helpers/scroll-to");

$(function () {

    // Declare variables
    var $ticketSessionCountdown = $("#ticketSessionCountdown");
    var currencySymbol = $("#currencySymbol").val();
    var $finalTotal = $("#finalTotal");
    var $payNow = $(".ticketing-button-main");
    var $confirmationModal = $("#confirmationModal");
    var $failureModal = $("#failureModal");
    var $matchRegistration = $("#matchRegistration");
    var $registrationForm = $("#registrationForm");

    /**
     *  Populate the summary box with the ticket types for purchase
     */
    function populateSummary() {

        for (var ticket in tickets) {

            var compiled = _.template($("#summaryItem").html());
            $("#cartSummaryItems").append(compiled({ currencySymbol: currencySymbol, ticket: tickets[ticket] }));
        }
    }

    /**
     *  Calculate the final total
     */
    function populateTotals() {

        var $paymentText = $("#paymentText");
        var $preAuth = $("#preAuth");

        $(".subtotal-amount").html(currencySymbol + loadedTicketCollection.subTotal);

        if (parseFloat(loadedTicketCollection.discount) > 0) {
            $(".discount-label").show();
            $(".discount-amount").html("-" + currencySymbol + loadedTicketCollection.discount).show();
        }
        if (parseFloat(loadedTicketCollection.totalBooking) > 0) {
            $(".booking-fees-label").show();
            $(".booking-fees-amount").html("+" + currencySymbol + loadedTicketCollection.totalBooking).show();
        }
        if (parseFloat(loadedTicketCollection.totalProcessing) > 0) {
            $(".processing-fees-label").show();
            $(".processing-fees-amount").html("+" + currencySymbol + loadedTicketCollection.totalProcessing).show();
        }
        $(".total-amount").html(currencySymbol + loadedTicketCollection.totalAmount);
        $finalTotal.html(currencySymbol + loadedTicketCollection.totalAmount);

        if (parseInt(loadedTicketCollection.totalAmount) == 0 && $preAuth.val() == "0") {
            $(".card-form").hide();
        } else if (parseInt(loadedTicketCollection.totalAmount) == 0 && $preAuth.val() == "1") {
            $paymentText.find("#paymentTextPaying").hide();
            $paymentText.find("#paymentTextNotPaying").show();
        }
    }

    function payNowClick(event) {

        $payNow.off("click", payNowClick);

        event.stopPropagation();
        event.preventDefault();

        if ($("#registrationForm").valid()) {

            var dialogs = Dialogs({
                ok: "Ok",
                cancel: null,
                hostname: "Please Confirm",
                icon: "/microsite/images/alert-symbol.png"
            });
            dialogs.cancel();
            dialogs.confirm("Are you sure you want to complete this purchase?", function (ok) {

                if (ok) {

                    var finalTicketOutput = {
                        data: loadedTicketCollection,
                        tickets: loadedTicketOrder
                    };

                    var paymentFormSend = $("#registrationForm").serializeArray();
                    paymentFormSend.push({
                        name: "data",
                        value: JSON.stringify(finalTicketOutput)
                    });

                    $body.find(".please-wait").fadeIn("fast");

                    var prom = ajax("/ticket/order", "post", paymentFormSend);

                    prom.done(function () {
                        $(window).off("beforeunload", session.unloadMessage);
                        $(window).off("unload", ticketCollection.unloadAndClear);
                        window.location.href = "/microsite/thank-you?action=tickets";
                    }).error(function (e, status, request) {
                        $failureModal.modal("show");
                        console.error(e, status, request);
                    }).always(function () {
                        $body.find(".please-wait").fadeOut("fast");
                    });
                }
            });
        }

        $payNow.on("click", payNowClick);
    }

    function matchRegistration(event) {

        event.stopPropagation();
        event.preventDefault();

        var self = $(event.target);

        if (self.is(":checked")) {
            $("input[name=billingAddress1]").val(loadedTicketOrder[0]["address1"]);
            $("input[name=billingAddress2]").val(loadedTicketOrder[0]["address2"]);
            $("input[name=billingTown]").val(loadedTicketOrder[0]["town"]);
            $("input[name=billingCounty]").val(loadedTicketOrder[0]["county"]);
            $("input[name=billingPostcode]").val(loadedTicketOrder[0]["postcode"]);
        } else {
            $("input[name=billingAddress1]").val("");
            $("input[name=billingAddress2]").val("");
            $("input[name=billingTown]").val("");
            $("input[name=billingCounty]").val("");
            $("input[name=billingPostcode]").val("");
        }
    }

    jQuery.validator.addMethod("noSpaceRegex", function (value, element) {
        return this.optional(element) || !/^\s{1,}/gm.test(value);
    }, "This field is required");

    $registrationForm.validate({
        invalidHandler: function invalidHandler(event, validator) {
            // 'this' refers to the form
            var errors = validator.numberOfInvalids();
            if (errors) {
                ScrollTo($(validator.errorList[0].element));
            }
        },
        errorPlacement: function errorPlacement(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else if (element.closest('.terms-agree-text').length) {
                error.insertAfter(element.closest('.terms-agree-text'));
            } else {
                error.insertAfter(element);
            }
        },
        rules: {
            fullname: {
                required: true,
                noSpaceRegex: {
                    param: true
                }
            },
            card: {
                required: true,
                rangelength: [15, 16],
                digits: true
            },
            cvv2: {
                required: true,
                rangelength: [3, 4],
                digits: true
            },
            expm: {
                required: true
            },
            expy: {
                required: true
            },
            billingAddress1: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingTown: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingCounty: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            billingPostcode: {
                required: true,
                noSpaceRegex: {
                    param: true
                }

            },
            terms: "required"
        },
        messages: {
            fullname: "Please enter your name as it appears on the card",
            cardNumber: {
                required: "Please enter the long card number",
                rangelength: "Please enter a valid long card number",
                number: "Please enter a valid long card number"
            },
            securityNumber: {
                required: "Please enter the Security CVV2 number from the back of your card",
                rangelength: "Please enter a valid security number",
                number: "Please enter a valid security number"
            },
            expm: {
                required: "Please select card expiry month"
            },
            expy: {
                required: "Please select card expiry year"
            },
            billingAddress1: {
                required: "Please enter your billing address"
            },
            billingTown: {
                required: "Please enter your billing town/city"
            },
            billingCounty: {
                required: "Please enter your billing state/region"
            },
            billingPostcode: {
                required: "Please enter your billing Zip/postal code"
            },
            terms: "Please accept the terms and conditions"
        }
    });

    // Event listeners
    $payNow.on("click", payNowClick);

    if ($body.hasClass("summary")) {

        $(window).on("beforeunload", session.unloadMessage);
        $(window).on("unload", ticketCollection.unloadAndClear);

        var loadedTicketCollection = ticketCollection.load();
        var loadedTicketOrder = ticketOrder.load();
        var tickets = loadedTicketCollection.tickets;

        // start the checking of the remaining time
        setInterval(function () {
            session.sessionRemaining($ticketSessionCountdown, ticketCollection);
        }, 1000);

        // Populate the summary from the ticketCollection
        populateSummary();

        // Populate totals
        populateTotals();

        $matchRegistration.on("switchChange.bootstrapSwitch", matchRegistration);
    }
});

},{"./components/ticketCollection":18,"./components/ticketOrder":19,"./helpers/scroll-to":21,"./resources/ajax":31,"./resources/session":35,"dialogs":2}],40:[function(require,module,exports){
'use strict';

var $body = $("body");
var ticket = require('./components/ticket');
var ticketCollection = require('./components/ticketCollection');
var ajax = require('./resources/ajax');
var session = require("./resources/session");
var Dialogs = require("dialogs");
var Tools = require('./helpers/tools');

var dialogs = Dialogs({
    ok: "Ok",
    cancel: null,
    hostname: "Booking",
    icon: "/microsite/images/alert-symbol.png"
});

$(function () {

    // Declare variables
    var $cartShowMore = $(".cart-show-more");
    var $ticketQuantity = $(".ticket-quantity");
    var currencySymbol = $("#currencySymbol").val();
    var $applyPromoCode = $(".apply-promo-code");
    var $confirmPay = $(".confirm-and-pay");
    var $ticketSessionCountdown = $("#ticketSessionCountdown");

    var subTotal = 0;
    var discount = 0;
    var totalBooking = 0;
    var totalProcessing = 0;
    var totalAmount = 0;

    /**
     *  Toggle the display of more information on and off
     *
     * @param event
     */
    function toggleShowMore(event) {

        var $this = $(event.target);
        var $parentTicket = $this.closest(".ticket");

        if ($this.html() == "Show More") {
            $parentTicket.find(".cart-item-showmore-info").html(JSON.parse($parentTicket.attr("data-description")));
            $this.html("Show Less");
        } else {
            $parentTicket.find(".cart-item-showmore-info").html(JSON.parse($parentTicket.attr("data-description")).substr(0, 54) + "...");
            $this.html("Show More");
        }
    }

    /**
     *  Update the prices for each individual ticket when the quantity is changed
     * @param event
     */
    function updateQuantity(event) {

        var $this = $(event.target);

        var quantity = $this.val();
        var $ticket = $this.closest(".ticket");

        var ticket = ticketCollection.get($ticket.attr("data-id"));

        ticket.setQuantity(quantity);

        calculateTotals();

        showHideConfirmButton();
    }

    /**
     *  Calculate the totals when required
     */
    function calculateTotals() {

        subTotal = ticketCollection.getSubTotal();
        discount = ticketCollection.getDiscount();
        totalBooking = ticketCollection.getTotalBooking();
        totalProcessing = ticketCollection.getTotalProcessing();
        totalAmount = ticketCollection.getTotalAmount();

        displayTotals();
    }

    /**
     *  Display the totals when required
     */
    function displayTotals() {

        var $subtotalLabel = $(".subtotal-label");
        var $subtotalAmount = $(".subtotal-amount");
        var $discountLabel = $(".discount-label");
        var $discountAmount = $(".discount-amount");
        var $bookingFeeLabel = $(".booking-fees-label");
        var $bookingFeeAmount = $(".booking-fees-amount");
        var $processingFeeLabel = $(".processing-fees-label");
        var $processingFeeAmount = $(".processing-fees-amount");
        var $totalLabel = $(".total-label");
        var $totalAmount = $(".total-amount");

        $subtotalLabel.show();
        $subtotalAmount.show().html(currencySymbol + Tools.formatMoney(subTotal));

        if (discount > 0) {
            $discountLabel.show();
            $discountAmount.show().html("-" + currencySymbol + Tools.formatMoney(discount));
        } else {
            $discountLabel.hide();
            $discountAmount.hide();
        }

        if (totalBooking > 0) {
            $bookingFeeLabel.show();
            $bookingFeeAmount.show().html("+" + currencySymbol + Tools.formatMoney(totalBooking));
        } else {
            $bookingFeeLabel.hide();
            $bookingFeeAmount.hide();
        }

        if (totalProcessing > 0) {
            $processingFeeLabel.show();
            $processingFeeAmount.show().html("+" + currencySymbol + Tools.formatMoney(totalProcessing));
        } else {
            $processingFeeLabel.hide();
            $processingFeeAmount.hide();
        }

        $totalLabel.show();
        $totalAmount.show().html(currencySymbol + Tools.formatMoney(totalAmount));
    }

    /**
     *  Build the ticket resources
     */
    function createTicketResources() {

        var $cartHolder = $(".cart-holder");

        $cartHolder.find(".ticket").each(function () {

            var $this = $(this);

            ticketCollection.add(new ticket($this.attr("data-id"), $this.attr("data-name"), $this.attr("data-price"), $this.attr("data-booking"), $this.attr("data-processing"), 0, $this.attr("data-seats"), $this.attr("data-options"), JSON.parse($this.attr("data-description")), $this.attr("data-product")));
        });
    }

    /**
     *  Update the price and fees for each ticket in the collection
     */
    function populateTicketPrices() {

        var tickets = ticketCollection.raw();

        for (var ticket in tickets) {

            var $ticket = $(".ticket[data-id=" + tickets[ticket].id + "]");
            $ticket.find(".cart-item-price").html(currencySymbol + Tools.formatMoney(tickets[ticket].price()));

            if (tickets[ticket].bookingFee() > 0) {
                $ticket.find(".cart-item-booking-fee").show().html("+" + currencySymbol + Tools.formatMoney(tickets[ticket].bookingFee()) + " booking fee");
            } else {
                $ticket.find(".cart-item-booking-fee").hide();
            }

            if (tickets[ticket].processingFee() > 0) {
                $ticket.find(".cart-item-processing-fee").show().html("+" + parseFloat(tickets[ticket].processingFee()).toFixed(1) + "% card processing fee");
            } else {
                $ticket.find(".cart-item-processing-fee").hide();
            }
        }

        calculateTotals();
    }

    function populateDescriptions() {

        var $tickets = $(".ticket");

        $tickets.each(function () {

            var $this = $(this);

            if (JSON.parse($this.attr("data-description")).length > 54) {
                $this.find(".cart-item-showmore-info").html(JSON.parse($this.attr("data-description")).substring(0, 54) + "...");
                $this.find(".cart-show-more").show();
            } else {
                $this.find(".cart-item-showmore-info").html(JSON.parse($this.attr("data-description")));
                $this.find(".cart-show-more").hide();
            }
        });
    }

    /**
     *  Get the promo code from the API
     * @param event
     */
    function getPromoCode(event) {

        var $this = $(event.target);
        var promoCode = $("#promoCode").val();
        var $promoCodeInfo = $("#promoCodeInfo");

        $this.off("click", getPromoCode);
        $this.html("Looking up code...");

        var prom = ajax("/ticket/promo/" + promoCode, "get", null);

        prom.done(function (data) {

            promoCode = data.body.model;

            if (promoCode.valid) {
                // apply the promo code to the correct ticket
                $promoCodeInfo.empty();
                applyPromoCode(promoCode);
            } else {
                $promoCodeInfo.html("Sorry, that Promotional Code is invalid");
            }
        }).error(function (e) {

            $promoCodeInfo.html("Sorry, that Promotional Code could not be found");
        }).always(function () {

            $this.on("click", getPromoCode);
            $this.html("Apply");
        });
    }

    /**
     *  Apply the promo code discount to the ticket
     * @param promoCode
     */
    function applyPromoCode(promoCode) {

        var ticket = ticketCollection.get(promoCode.ticketType);

        if (ticket) {
            var $ticket = $(".ticket[data-id=" + ticket.id + "]");
            $ticket.find(".cart-item-promocode").html(generatePromoCodeHtml(promoCode));
            ticketCollection.addPromoCode(promoCode);
            ticket.applyDiscount(promoCode);
        }

        populateTicketPrices();
    }

    /**
     *  Generate the HTML text for the promo code when it is applied to the ticket
     * @param promoCode
     * @returns {string}
     */
    function generatePromoCodeHtml(promoCode) {

        var html = "";

        if (promoCode.discountType === "amount") {
            html = "* Promotional Code " + promoCode.code + " Applied *<br />* " + currencySymbol + promoCode.discountAmount + " discount *";
        } else {
            html = "* Promotional Code " + promoCode.code + " Applied *<br />* " + promoCode.discountPercentage + "% discount *";
        }

        return html;
    }

    /**
     *  Load the ticket collection from local storage where appropriate
     */
    function loadStoredTicketCollection() {

        var loadedTicketCollection = ticketCollection.load();

        if (loadedTicketCollection) {
            var tickets = loadedTicketCollection.tickets;

            for (var ticket in tickets) {
                // if selected quantity of tickets is greater than the highest number of tickets available then add a new option dynamically
                var $ticket = $(".ticket[data-id=" + tickets[ticket].id + "]");
                if (tickets[ticket].quantity > $ticket.find("select").find("option:last").val()) {
                    $ticket.find("select").append("<option value='" + tickets[ticket].quantity + "'>" + tickets[ticket].quantity + "</option>");
                }
                $ticket.find("select").val(tickets[ticket].quantity).trigger("change");
            }
            var promoCodes = loadedTicketCollection.promoCodes;
            for (var promo in promoCodes) {
                applyPromoCode(promoCodes[promo]);
            }
        }
    }

    /**
     *  Save the ticket collection
     */
    function saveTicketCollection() {

        ticketCollection.save();
    }

    /**
     *  Reserve the selected tickets and send the data off to the API
     */
    function reserveSelectedTickets() {

        var reserveTickets = [];

        var tickets = ticketCollection.raw();

        for (var ticket in tickets) {
            if (tickets[ticket].quantity() > 0) {
                reserveTickets.push({
                    ticketType: parseInt(tickets[ticket].id),
                    quantity: tickets[ticket].quantity()
                });
            }
        }

        var data = {
            reserveTickets: reserveTickets,
            oldSession: null,
            session: parseInt(session.load().getTime())
        };

        ticketCollection.reserveTickets(data);
    }

    /**
     *  Trigger the saving of the ticket collection, reserve the selected tickets, and move to the next page
     * @param event
     */
    function saveAndContinue(event) {

        var $this = $(event.target);

        dialogs.cancel();
        dialogs.confirm("You have 15 minutes left to complete your booking.  Click Ok to Continue", function (ok) {
            if (ok) {

                $(window).off("unload", ticketCollection.unloadAndClear);

                if (!session.isStarted()) {
                    // start the session
                    session.start();
                }

                saveTicketCollection();

                reserveSelectedTickets();

                window.location.href = $this.attr("data-href");
            }
        });
    }

    function showHideConfirmButton() {

        var display = false;

        $ticketQuantity.each(function () {
            var $this = $(this);
            if ($this.val() > 0) {
                display = true;
            }
        });

        if (display) {
            $confirmPay.show();
        } else {
            $confirmPay.hide();
        }
    }

    // Event listeners
    $cartShowMore.on("click", toggleShowMore);
    $ticketQuantity.on("change", updateQuantity);
    $applyPromoCode.on("click", getPromoCode);
    $confirmPay.on("click", saveAndContinue);

    if ($body.hasClass("cart")) {

        showHideConfirmButton();

        ticketCollection.unloadAndClear();

        $(window).on("unload", ticketCollection.unloadAndClear);

        // Build the selectable tickets as components
        createTicketResources();

        // Populate the price fields of the tickets, which will then update the grand totals
        populateTicketPrices();

        // Populate the ticket descriptions
        populateDescriptions();

        $ticketQuantity.val(0);
    }
});

},{"./components/ticket":17,"./components/ticketCollection":18,"./helpers/tools":22,"./resources/ajax":31,"./resources/session":35,"dialogs":2}]},{},[1]);
